{"version":3,"sources":["../../src/Abstract/AbstractCSSStyleDeclaration.js"],"names":[],"mappings":"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","file":"AbstractCSSStyleDeclaration.js","sourcesContent":["class CSSStyleRule {\n    constructor(propertyName: string, value: string, important: boolean) {\n        this.name = propertyName;\n        this.value = value;\n        this.important = important;\n    }\n}\n\n/**\n * CSSStyleDeclaration represents a collection of CSS property-value pairs. It is used in a few APIs\n *\n * - HTMLElement.style - to manipulate the style of a single element (<elem style=\"...\">);\n * - (TODO: reword) is an interface to the declaration block returned by the style\n * property of a cssRule in a stylesheet, when the rule is a CSSStyleRule.\n * - CSSStyleDeclaration is also a read-only interface to the result of window.getComputedStyle().\n */\nexport default class AbstractCSSStyleDeclaration {\n    /**\n     * @type {String}\n     */\n    get cssText() {\n        return this._value;\n    }\n\n    /**\n     * @param {String} style\n     */\n    set cssText(style) {\n        this._parse(style);\n    }\n\n    /**\n     * Parse style\n     *\n     * @internal\n     * @param {String} style\n     */\n    _parse(style) {\n        this._properties = [];\n        this._propertiesMap = {};\n        style.split(';').forEach((part) => {\n            part = part.trim();\n            if (!part) {\n                return;\n            }\n\n            const important = !!part.match(/!important$/);\n            if (important) {\n                part = part.slice(0, -'!important'.length);\n            }\n\n            const splitPoint = part.indexOf(':');\n            if (splitPoint) {\n                const key = part.slice(0, splitPoint).trim();\n                const value = part.slice(splitPoint + 1).trim();\n                this._setProperty(key, value, important && 'important');\n            }\n        });\n        this._stringify();\n    }\n\n    /**\n     * Parse style\n     *\n     * @internal\n     */\n    _stringify() {\n        let stylified = '';\n        this._properties.forEach((s) => {\n            stylified += s.name + ':' + s.value + (s.important && '!important' || '') + ';';\n        });\n        this._value = stylified;\n    }\n\n    /**\n     * Returns the optional priority, \"important\". Example: priString= styleObj.getPropertyPriority('color')\n     *\n     * @param {String} propertyName\n     * @param {String|undefined|false} important\n     */\n    getPropertyPriority(propertyName) {\n        return this._propertiesMap[propertyName] && this._propertiesMap[propertyName].important && 'important';\n    }\n\n    /**\n     * Returns the optional priority, \"important\". Example: priString= styleObj.getPropertyPriority('color')\n     *\n     * @param {String} propertyName\n     * @return {*} propertyValue\n     */\n    getPropertyValue(propertyName) {\n        return this._propertiesMap[propertyName] && this._propertiesMap[propertyName].value;\n    }\n\n    /**\n     * Returns a property name. Example: nameString= styleObj.item(0) Alternative: nameString= styleObj[0]\n     *\n     * @param {Number} index\n     * @return {String} propertyName\n     */\n    item(index) {\n        return this._properties[index] && this._properties[index].name;\n    }\n\n    /**\n     * Returns the value deleted. Example: valString= styleObj.removeProperty('color')\n     *\n     * @param {String} propertyName\n     * @return {*} propertyValue\n     */\n    removeProperty(propertyName) {\n        if (this._propertiesMap[propertyName]) {\n            const value = this._propertiesMap[propertyName];\n            this._properties.splice(this._properties.indexOf(value), 1);\n            delete this._propertiesMap[propertyName];\n            this._stringify();\n            return value.value;\n        }\n    }\n\n    /**\n     * No return. Example: styleObj.setProperty('color', 'red', 'important')\n     *\n     * @param {String} propertyName\n     * @param {String} value\n     * @param {String} important\n     */\n    setProperty(propertyName, value, important) {\n        this._setProperty(propertyName, value, important);\n        this._stringify();\n    }\n\n    /**\n     * No return. Example: styleObj.setProperty('color', 'red', 'important')\n     *\n     * @param {String} propertyName\n     * @param {String} value\n     * @param {String} important\n     */\n    _setProperty(propertyName, value, important) {\n        if (!propertyName.match(/^[a-z\\-]+$/)) {\n            throw new Error('Not valid property name: ' + propertyName);\n        }\n\n        const cssRule = new CSSStyleRule(propertyName, value, important === 'important');\n        if (this._propertiesMap[propertyName]) {\n            this._properties.splice(this._properties.indexOf(this._propertiesMap[propertyName]), 1, cssRule);\n        } else {\n            this._properties.push(cssRule);\n        }\n\n        this._propertiesMap[propertyName] = cssRule;\n    }\n}\n"]}