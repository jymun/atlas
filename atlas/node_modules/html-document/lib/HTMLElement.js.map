{"version":3,"sources":["../src/HTMLElement.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;wBAAoB,WAAW;;;;8CACC,mCAAmC;;;;oCAC7C,yBAAyB;;;;oCACnB,yBAAyB;;;;AAErD,IAAM,YAAY,GAAG,6EAA6E,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;;;;;;;;;;IASzF,WAAW;AACjB,aADM,WAAW,GACd;8BADG,WAAW;;AAExB,mCAFa,WAAW,6CAEhB;;;;;;AAMR,YAAI,CAAC,KAAK,GAAG,gDAAwB,IAAI,CAAC,CAAC;;;;;;AAM3C,YAAI,CAAC,SAAS,GAAG,sCAAc,IAAI,CAAC,CAAC;KACxC;;cAfgB,WAAW;;iBAAX,WAAW;;eAkCX,2BAAC,aAAa,EAAE,KAAK,EAAE;AACpC,gBAAI,aAAa,KAAK,OAAO,EAAE;AAC3B,oBAAI,CAAC,KAAK,CAAC,OAAO,GAAG,KAAK,IAAI,EAAE,CAAC;aACpC;;AAED,gBAAI,aAAa,KAAK,OAAO,EAAE;AAC3B,oBAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC;aACtC;SACJ;;;;;;;;;aApBY,eAAG;AACZ,mBAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;SACrC;;;;;;aAMY,aAAC,SAAS,EAAE;AACrB,gBAAI,CAAC,YAAY,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;SACzC;;;;;;;;aAgBY,eAAG;;;AACZ,mBAAO,GAAG,GAAG,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,UAAC,KAAK,EAAE,aAAa,EAAK;AACxF,uBAAO,KAAK,GAAG,GAAG,GAAG,aAAa,GAAG,IAAI,GAAG,uCAAgB,MAAK,WAAW,CAAC,aAAa,CAAC,CAAC,GAAG,GAAG,CAAC;aACtG,EAAE,EAAE,CAAC,GAAG,GAAG,IAAI,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAA,CAAE;SAClH;;;WApDgB,WAAW;;;qBAAX,WAAW","file":"HTMLElement.js","sourcesContent":["import Element from './Element';\nimport CSSStyleDeclaration from './HTMLElement/CSSStyleDeclaration';\nimport ClassList from './HTMLElement/ClassList';\nimport escapeAttribute from './utils/escapeAttribute';\n\nconst voidElements = 'area base br col embed hr img input keygen link meta param source track wbr'.split(' ');\n\n/**\n * The HTMLElement interface represents any HTML element.\n *\n * @see https://developer.mozilla.org/en/docs/Web/API/HTMLElement\n * @class HTMLElement\n * @extends Element\n */\nexport default class HTMLElement extends Element {\n    constructor() {\n        super();\n        /**\n         * returns a token list of the class attribute of the element\n         * @member {CSSStyleDeclaration} HTMLElement#style\n         * @readonly\n         */\n        this.style = new CSSStyleDeclaration(this);\n        /**\n         * returns a token list of the class attribute of the element\n         * @member {ClassList} HTMLElement#classList\n         * @readonly\n         */\n        this.classList = new ClassList(this);\n    }\n\n    /**\n     * The class of the element.\n     *\n     * @member {String} HTMLElement#className\n     */\n    get className() {\n        return this.getAttribute('class');\n    }\n\n    /**\n     * @ignore\n     * @param {String} className\n     */\n    set className(className) {\n        this.setAttribute('class', className);\n    }\n\n    _updatedAttribute(attributeName, value) {\n        if (attributeName === 'style') {\n            this.style.cssText = value || '';\n        }\n\n        if (attributeName === 'class') {\n            this.classList._parse(value || '');\n        }\n    }\n\n    /**\n     * @ignore\n     * @return {String}\n     */\n    get outerHTML() {\n        return '<' + this.nodeName + Object.keys(this._attributes).reduce((value, attributeName) => {\n            return value + ' ' + attributeName + '=\"' + escapeAttribute(this._attributes[attributeName]) + '\"';\n        }, '') + '>' + (voidElements.indexOf(this.nodeName) !== -1 ? '' : this.innerHTML + '</' + this.nodeName + '>');\n    }\n\n}\n"]}