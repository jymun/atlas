{"version":3,"sources":["../src/ParentNode.js"],"names":[],"mappings":"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","file":"ParentNode.js","sourcesContent":["import Node from './Node';\nimport parse from './parse';\n\n/**\n * The ParentNode interface contains methods that are particular to Node objects that can have children.\n *\n * @see https://developer.mozilla.org/en/docs/Web/API/ParentNode\n * @class ParentNode\n * @extends Node\n */\nexport default class ParentNode extends Node {\n    constructor() {\n        super();\n        this._childNodes = [];\n    }\n\n    /**\n     * TODO return {HTMLCollection}\n     * @member {String} ParentNode#childNodes\n     * @readonly\n     */\n    get childNodes() {\n        return this._childNodes;\n    }\n\n    _childNodesRecursiveForEach(callback) {\n        this._childNodes.forEach(function(node) {\n            callback(node);\n            if (node instanceof ParentNode) {\n                node._childNodesRecursiveForEach(callback);\n            }\n        });\n    }\n\n    _childNodesRecursiveFind(callback) {\n        let result;\n        this._childNodes.some(function(node) {\n            if (callback(node)) {\n                result = node;\n                return true;\n            }\n\n            if (node instanceof ParentNode) {\n                result = node._childNodesRecursiveFind(callback);\n                if (result !== undefined) {\n                    return true;\n                }\n            }\n        });\n        return result;\n    }\n\n    /**\n     * @member {Node|null} ParentNode#parentNode\n     * @readonly\n     */\n    get parentNode() {\n        return this._parentNode || null;\n    }\n    /**\n     * @member {Node|null} ParentNode#firstChild\n     * @readonly\n     */\n    get firstChild() {\n        return this._childNodes[0] || null;\n    }\n\n    /**\n     * @member {Node|null} ParentNode#lastChild\n     * @readonly\n     */\n    get lastChild() {\n        return this._childNodes[this._childNodes.length - 1] || null;\n    }\n\n    /**\n     * @member {Node|null} ParentNode#previousSibling\n     * @readonly\n     */\n    get previousSibling() {\n        const indexInParent = this.parentNode._childNodes.indexOf(this);\n        if (indexInParent === -1) {\n            throw new Error('Unexpected state: this node is not in the parent');\n        }\n\n        return indexInParent !== 0 && this.parentNode._childNodes[indexInParent - 1] || null;\n    }\n\n    /**\n     * @member {Node|null} ParentNode#nextSibling\n     * @readonly\n     */\n    get nextSibling() {\n        const indexInParent = this.parentNode._childNodes.indexOf(this);\n        if (indexInParent === -1) {\n            throw new Error('Unexpected state: this node is not in the parent');\n        }\n\n        return this.parentNode._childNodes[indexInParent + 1] || null;\n    }\n\n    /**\n     * @method ParentNode#appendChild\n     * @param {Node} child\n     * @return {Node}\n     */\n    appendChild(child) {\n        if (!(child instanceof Node)) {\n            throw new Error('Trying to add non node element');\n        }\n\n        if (child._parentNode) {\n            child._parentNode.removeChild(child);\n        }\n\n        if (child.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n            let childNode;\n\n            while (childNode = child.firstChild) {\n                child.removeChild(childNode);\n                this.appendChild(childNode);\n            }\n\n            return child;\n        }\n\n        child._parentNode = this;\n        this._childNodes.push(child);\n        return child;\n    }\n\n    /**\n     * @method ParentNode#replaceChild\n     * @param {Node} newChild\n     * @param {Node} oldChild\n     * @return {Node}\n     */\n    replaceChild(newChild, oldChild) {\n        const index = this._childNodes.indexOf(oldChild);\n        if (index === -1) {\n            throw new Error('Node was not found');\n        }\n\n        if (newChild._parentNode) {\n            newChild._parentNode.removeChild(newChild);\n        }\n\n        if (newChild.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n            const newChildren = [];\n            let childNode;\n\n            while (childNode = newChild.firstChild) {\n                newChild.removeChild(childNode);\n                childNode._parentNode = this;\n                newChildren.push(childNode);\n            }\n\n            this._childNodes.splice.bind(this._childNodes, index, 1).apply(null, newChildren);\n        } else {\n            newChild._parentNode = this;\n            this._childNodes[index] = newChild;\n        }\n\n        delete oldChild._parentNode;\n        return oldChild;\n    }\n\n    /**\n     * @method ParentNode#removeChild\n     * @param {Node} toRemoveChild\n     * @return {Node}\n     */\n    removeChild(toRemoveChild) {\n        const index = this._childNodes.indexOf(toRemoveChild);\n        if (index === -1) {\n            throw new Error('Node was not found');\n        }\n\n        this._childNodes.splice(index, 1);\n        delete toRemoveChild._parentNode;\n        return toRemoveChild;\n    }\n\n    /**\n     * @method ParentNode#insertBefore\n     * @param {Node} child\n     * @param {Node} existingChild\n     * @return {Node}\n     */\n    insertBefore(child, existingChild) {\n        const index = this._childNodes.indexOf(existingChild);\n        if (index === -1) {\n            throw new Error('Node was not found');\n        }\n\n        if (child._parentNode) {\n            child._parentNode.removeChild(child);\n        }\n\n        if (child.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n            const children = [];\n            let childNode;\n\n            while (childNode = child.firstChild) {\n                child.removeChild(childNode);\n                childNode._parentNode = this;\n                children.push(childNode);\n            }\n\n            this._childNodes.splice.bind(this._childNodes, index, 0).apply(null, children);\n        } else {\n            child._parentNode = this;\n            this._childNodes.splice(index, 0, child);\n        }\n\n        return child;\n    }\n\n    /**\n     * @ignore\n     * @return {String}\n     */\n    get innerHTML() {\n        return this._childNodes.reduce(function(value, node) {\n            return value + node._toHTML();\n        }, '');\n    }\n\n    /**\n     * @ignore\n     * @param {String} html\n     */\n    set innerHTML(html) {\n        this._childNodes = [];\n        parse(html, this);\n    }\n\n    /**\n     * @ignore\n     * @return {String}\n     */\n    get textContent() {\n        return this._childNodes.reduce(function(value, node) {\n            return value + node.textContent;\n        }, '');\n    }\n}\n"]}