{"version":3,"sources":["../src/ParentNode.js"],"names":[],"mappings":"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","file":"ParentNode.js","sourcesContent":["/* global test, document */\nimport assert from 'proclaim';\nconst expect = assert.strictEqual;\n\nconst lib = '../../lib/';\n\nconst ParentNode = require(lib + 'ParentNode');\nconst Document = require(lib + 'Document');\nconst document = new Document();// jshint ignore: line\n\ntest('empty ParentNode', () => {\n    let parentNode = new ParentNode();\n    assert.isNull(parentNode.firstChild);\n    assert.isNull(parentNode.lastChild);\n    expect(parentNode.childNodes.length, 0);\n});\n\ntest('appendChild Node', () => {\n    let parentNode = new ParentNode();\n    let span1 = document.createElement('span');\n\n    let result = parentNode.appendChild(span1);\n    expect(result, span1);\n    expect(parentNode.childNodes.length, 1);\n    expect(parentNode.firstChild, span1);\n    expect(parentNode.lastChild, span1);\n\n    let span2 = document.createElement('span');\n    result = parentNode.appendChild(span2);\n    expect(result, span2);\n    expect(parentNode.firstChild, span1);\n    expect(parentNode.lastChild, span2);\n\n    result = parentNode.appendChild(span1);\n    expect(result, span1);\n    expect(parentNode.childNodes.length, 2);\n    expect(parentNode.firstChild, span2);\n    expect(parentNode.lastChild, span1);\n});\n\ntest('firstChild, lastChild, previousSibling, nextSibling Node', () => {\n    let parentNode = new ParentNode();\n    let span1 = document.createElement('span');\n\n    let result = parentNode.appendChild(span1);\n    expect(parentNode.firstChild, span1);\n    expect(parentNode.lastChild, span1);\n    expect(span1.previousSibling, null);\n    expect(span1.nextSibling, null);\n\n    let span2 = document.createElement('span');\n    result = parentNode.appendChild(span2);\n    expect(result, span2);\n    expect(parentNode.firstChild, span1);\n    expect(parentNode.lastChild, span2);\n    expect(span1.previousSibling, null);\n    expect(span2.previousSibling, span1);\n    expect(span1.nextSibling, span2);\n    expect(span2.nextSibling, null);\n});\n\ntest('appendChild DocumentFragment', () => {\n    let parentNode = new ParentNode();\n    let span1 = document.createElement('span');\n    let span2 = document.createElement('span');\n    let fragment = document.createDocumentFragment();\n    fragment.appendChild(span1);\n    expect(fragment.childNodes.length, 1);\n    expect(fragment.firstChild, span1);\n    expect(fragment.lastChild, span1);\n    fragment.appendChild(span2);\n    expect(fragment.childNodes.length, 2);\n\n    let result = parentNode.appendChild(fragment);\n    expect(result, fragment);\n    expect(fragment.childNodes.length, 0);\n    expect(parentNode.childNodes.length, 2);\n    expect(parentNode.firstChild, span1);\n    expect(parentNode.lastChild, span2);\n});\n\ntest('replaceChild throws', () => {\n    let parentNode = new ParentNode();\n    let span1 = document.createElement('span');\n    let span2 = document.createElement('span');\n\n    assert.throws(function() {\n        parentNode.replaceChild(span2, span1);\n    }, 'Node was not found');\n});\n\ntest('replaceChild', () => {\n    let parentNode = new ParentNode();\n    let span1 = document.createElement('span');\n    let span2 = document.createElement('span');\n    parentNode.appendChild(span1);\n    expect(parentNode.childNodes.length, 1);\n    expect(parentNode.firstChild, span1);\n\n    let result = parentNode.replaceChild(span2, span1);\n    expect(result, span1);\n    expect(parentNode.childNodes.length, 1);\n    expect(parentNode.firstChild, span2);\n});\n\ntest('replaceChild DocumentFragment with one child', () => {\n    let parentNode = new ParentNode();\n    let span1 = document.createElement('span');\n    let span2 = document.createElement('span');\n\n    parentNode.appendChild(span1);\n    expect(parentNode.childNodes.length, 1);\n\n    let fragment = document.createDocumentFragment();\n    fragment.appendChild(span2);\n    expect(fragment.childNodes.length, 1);\n    expect(fragment.firstChild, span2);\n\n    let result = parentNode.replaceChild(fragment, span1);\n    expect(result, span1);\n    expect(fragment.childNodes.length, 0);\n    expect(parentNode.childNodes.length, 1);\n    expect(parentNode.firstChild, span2);\n});\n\ntest('replaceChild DocumentFragment with two child', () => {\n    let parentNode = new ParentNode();\n    let span1 = document.createElement('span');\n    let span2 = document.createElement('span');\n    let span3 = document.createElement('span');\n\n    parentNode.appendChild(span1);\n    expect(parentNode.childNodes.length, 1);\n\n    let fragment = document.createDocumentFragment();\n    fragment.appendChild(span2);\n    fragment.appendChild(span3);\n    expect(fragment.childNodes.length, 2);\n    expect(fragment.firstChild, span2);\n\n    let result = parentNode.replaceChild(fragment, span1);\n    expect(result, span1);\n    expect(fragment.childNodes.length, 0);\n    expect(parentNode.childNodes.length, 2);\n    expect(parentNode.firstChild, span2);\n    expect(parentNode.lastChild, span3);\n});\n\ntest('removeChild throws', () => {\n    let parentNode = new ParentNode();\n    let span1 = document.createElement('span');\n\n    assert.throws(function() {\n        parentNode.removeChild(span1);\n    }, 'Node was not found');\n});\n\ntest('removeChild', () => {\n    let parentNode = new ParentNode();\n    let span1 = document.createElement('span');\n    parentNode.appendChild(span1);\n\n    let result = parentNode.removeChild(span1);\n    expect(result, span1);\n    expect(parentNode.childNodes.length, 0);\n});\n\ntest('removeChild in the middle', () => {\n    let parentNode = new ParentNode();\n    let span1 = document.createElement('span');\n    let span2 = document.createElement('span');\n    let span3 = document.createElement('span');\n    parentNode.appendChild(span1);\n    parentNode.appendChild(span2);\n    parentNode.appendChild(span3);\n\n    let result = parentNode.removeChild(span2);\n    expect(result, span2);\n    expect(parentNode.childNodes.length, 2);\n    expect(parentNode.firstChild, span1);\n    expect(parentNode.lastChild, span3);\n});\n\ntest('insertBefore throws', () => {\n    let parentNode = new ParentNode();\n    let span1 = document.createElement('span');\n    let span2 = document.createElement('span');\n\n    assert.throws(function() {\n        parentNode.insertBefore(span2, span1);\n    }, 'Node was not found');\n});\n\ntest('insertBefore Node', () => {\n    let parentNode = new ParentNode();\n    let span1 = document.createElement('span');\n    let span2 = document.createElement('span');\n    parentNode.appendChild(span1);\n\n    let result = parentNode.insertBefore(span2, span1);\n    expect(result, span2);\n    expect(parentNode.childNodes.length, 2);\n    expect(parentNode.firstChild, span2);\n    expect(parentNode.lastChild, span1);\n});\n\ntest('insertBefore Node in the middle', () => {\n    let parentNode = new ParentNode();\n    let span1 = document.createElement('span');\n    let span2 = document.createElement('span');\n    let span3 = document.createElement('span');\n    parentNode.appendChild(span1);\n    parentNode.appendChild(span2);\n\n    let result = parentNode.insertBefore(span3, span2);\n    expect(result, span3);\n    expect(parentNode.childNodes.length, 3);\n    expect(parentNode.childNodes[0], span1);\n    expect(parentNode.childNodes[1], span3);\n    expect(parentNode.childNodes[2], span2);\n});\n\ntest('insertBefore fragment', () => {\n    let parentNode = new ParentNode();\n    let span1 = document.createElement('span');\n    let span2 = document.createElement('span');\n    parentNode.appendChild(span1);\n    parentNode.appendChild(span2);\n\n    let fragment = document.createDocumentFragment();\n    let span3 = document.createElement('span');\n    let span4 = document.createElement('span');\n    fragment.appendChild(span3);\n    fragment.appendChild(span4);\n\n    let result = parentNode.insertBefore(fragment, span1);\n    expect(result, fragment);\n    expect(parentNode.childNodes.length, 4);\n    expect(fragment.childNodes.length, 0);\n    expect(parentNode.childNodes[0], span3);\n    expect(parentNode.childNodes[1], span4);\n    expect(parentNode.childNodes[2], span1);\n    expect(parentNode.childNodes[3], span2);\n});\n"]}