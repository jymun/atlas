{"version":3,"sources":["../../src/Abstract/AbstractCSSStyleDeclaration.js"],"names":[],"mappings":"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","file":"AbstractCSSStyleDeclaration.js","sourcesContent":["/* global test */\nimport assert from 'proclaim';\nconst expect = assert.strictEqual;\n\nconst lib = '../../../lib/';\n\nconst AbstractCSSStyleDeclaration = require(lib + 'Abstract/AbstractCSSStyleDeclaration');\n\nclass MockCSSStyleDeclaration extends AbstractCSSStyleDeclaration {\n}\n\ntest('CSSStyleDeclaration set and get cssText', () => {\n    let style = new MockCSSStyleDeclaration();\n\n    style.cssText = 'color: white; background: #FFF !important';\n    expect(style.cssText, 'color:white;background:#FFF!important;');\n});\n\ntest('CSSStyleDeclaration _parse', () => {\n    let style = new MockCSSStyleDeclaration();\n\n    style.cssText = 'color: white; background: #FFF !important';\n    expect(style._properties.length, 2);\n    assert.isNotNull(style._propertiesMap.color);\n    assert.isNotNull(style._propertiesMap.background);\n    expect(style._propertiesMap.color.name, 'color');\n    expect(style._propertiesMap.color.value, 'white');\n    expect(style._propertiesMap.color.important, false);\n    expect(style._propertiesMap.background.name, 'background');\n    expect(style._propertiesMap.background.value, '#FFF');\n    expect(style._propertiesMap.background.important, true);\n});\n\ntest('CSSStyleDeclaration _stringify', () => {\n    let style = new MockCSSStyleDeclaration();\n\n    style.cssText = 'color: white; background: #FFF !important';\n    style._stringify();\n    expect(style.cssText, 'color:white;background:#FFF!important;');\n});\n\ntest('CSSStyleDeclaration getPropertyPriority', () => {\n    let style = new MockCSSStyleDeclaration();\n\n    style.cssText = 'color: white; background: #FFF !important';\n    expect(style.getPropertyPriority('color'), false);\n    expect(style.getPropertyPriority('something'), undefined);\n    expect(style.getPropertyPriority('background'), 'important');\n});\n\ntest('CSSStyleDeclaration getPropertyValue', () => {\n    let style = new MockCSSStyleDeclaration();\n\n    style.cssText = 'color: white; background: #FFF !important';\n    expect(style.getPropertyValue('color'), 'white');\n    expect(style.getPropertyValue('something'), undefined);\n    expect(style.getPropertyValue('background'), '#FFF');\n});\n\ntest('CSSStyleDeclaration item', () => {\n    let style = new MockCSSStyleDeclaration();\n\n    style.cssText = 'color: white; background: #FFF !important';\n    expect(style.item(0), 'color');\n    expect(style.item(1), 'background');\n    expect(style.item(2), undefined);\n});\n\ntest('CSSStyleDeclaration removeProperty', () => {\n    let style = new MockCSSStyleDeclaration();\n\n    style.cssText = 'color: white; background: #FFF !important';\n    expect(style.removeProperty('color'), 'white');\n    expect(style.item(0), 'background');\n    expect(style.item(1), undefined);\n});\n\ntest('CSSStyleDeclaration setProperty', () => {\n    let style = new MockCSSStyleDeclaration();\n\n    style.cssText = 'color: white';\n    expect(style.item(0), 'color');\n    expect(style.item(1), undefined);\n    style.setProperty('background', '#FFF');\n    expect(style.item(1), 'background');\n    expect(style.getPropertyValue('background'), '#FFF');\n    style.setProperty('background', '#000', 'important');\n    expect(style.item(1), 'background');\n    expect(style.item(2), undefined);\n    expect(style.getPropertyValue('background'), '#000');\n});\n"]}