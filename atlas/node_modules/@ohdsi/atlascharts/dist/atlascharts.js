/*

Copyright 2017 Observational Health Data Sciences and Informatics

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Author: Alexander Saltykov

*/

define('atlascharts/chart',["d3", "lodash", "d3-tip"],
	function(d3, lodash, d3tip) {
	"use strict";

	class Chart {
	  static get chartTypes() {
	    return {
	      AREA: 'AREA',
	      BOXPLOT: 'BOXPLOT',
	      DONUT: 'DONUT',
	      HISTOGRAM: 'HISTOGRAM',
	      LINE: 'LINE',
	      TRELLISLINE: 'TRELLISLINE',
	    };
	  }

    render(data, target, w, h, chartOptions) {

			if (typeof target == "string") {
				target = document.querySelector(target);
			}

			if (!this.doResize) {
				this.doResize = lodash.debounce(() => {
					this.render(data, target,target.clientWidth,target.clientHeight,chartOptions);
				}, 250);
				window.addEventListener("resize", this.doResize);
			}

		}

	  getOptions(chartSpecificDefaults, customOptions) {
	    const options = Object.assign({}, {
		      margins: {
		        top: 10,
		        right: 10,
		        bottom: 10,
		        left: 10,
		      },
		      xFormat: d3.format(',.0f'),
		      yFormat: d3.format('s'),
		      colors: d3.scaleOrdinal(d3.schemeCategory20.concat(d3.schemeCategory20c)),
		    },
		    // clone objects
			  Object.assign({}, chartSpecificDefaults),
			  Object.assign({}, customOptions)
		  );
		  return options;
	  }

	  createSvg(target, width, height) {

	    this.destroyTipIfExists();

	    const container = d3.select(target);
	    container.select('svg').remove();
	    const chart = container.append('svg')
	      .attr('preserveAspectRatio', 'xMinYMin meet')
	      .attr('viewBox', `
	        0
	        0
	        ${width}
	        ${height}`)
	      .append('g')
	      .attr('class', 'chart');

			this.chart = chart;

	    return chart;
	  }

	  useTip(tooltipConfigurer = () => {}, options) {

	    this.destroyTipIfExists();

	    this.tip = d3tip()
	      .attr('class', 'd3-tip');

	    tooltipConfigurer(this.tip, options);

	    if (this.chart) {
	      this.chart.call(this.tip);
	    }

	    return this.tip;
	  }

	  destroyTipIfExists() {
	    if (this.tip) {
	      this.tip.destroy();
	    }
	  }


	  static normalizeDataframe(dataframe) {
	    // rjson serializes dataframes with 1 row as single element properties.
	    // This function ensures fields are always arrays.
	    const keys = d3.keys(dataframe);
	    const frame = Object.assign({}, dataframe);
	    keys.forEach((key) => {
	      if (!(dataframe[key] instanceof Array)) {
	        frame[key] = [dataframe[key]];
	      }
	    });
	    return frame;
	  }

	  static dataframeToArray(dataframe) {
	    // dataframes from R serialize into an obect where each column is an array of values.
	    const keys = d3.keys(dataframe);
	    let result;
	    if (dataframe[keys[0]] instanceof Array) {
	      result = dataframe[keys[0]].map((d, i) => {
	        const item = {};
	        keys.forEach(p => {
	          item[p] = dataframe[p][i];
	        });
	        return item;
	      });
	    } else {
	      result = [dataframe];
	    }
	    return result;
	  }

	  get formatters() {
	    return {
	      formatSI: (p) => {
	        p = p || 0;
	        return (d) => {
	          if (d < 1) {
	            return Math.round(d, p);
	          }
	          const prefix = d3.format(',.0s', d);
	          return prefix(d);
	        }
	      },
	    };
	  }

	  truncate(text, width) {
	    text.each(function() {
	      const t = d3.select(this);
	      const originalText = t.text();
	      let textLength = t.node().getComputedTextLength();
	      let text = t.text();
	      while (textLength > width && text.length > 0) {
	        text = text.slice(0, -1);
	        t.text(`${text}...`);
	        textLength = t.node().getComputedTextLength();
	      }
	      t.append('title').text(originalText);
	    });
	  }

	  wrap(text, width) {
	    text.each(function () {
	      const text = d3.select(this);
	      const words = text.text().split(/\s+/).reverse();
	      let line = [];
	      let word;
	      let lineNumber = 0;
	      const lineCount = 0;
	      const lineHeight = 1.1; // ems
	      const y = text.attr('y');
	      const dy = parseFloat(text.attr('dy'));
	      let tspan = text
	        .text(null)
	        .append('tspan')
	        .attr('x', 0)
	        .attr('y', y)
	        .attr('dy', `${dy}em`);
	      while (word = words.pop()) {
	        line.push(word);
	        tspan.text(line.join(' '));
	        if (tspan.node().getComputedTextLength() > width) {
	          if (line.length > 1) {
	            line.pop(); // remove word from line
	            words.push(word); // put the word back on the stack
	            tspan.text(line.join(' '));
	          }
	          line = [];
	          tspan = text
	            .append('tspan')
	            .attr('x', 0)
	            .attr('y', y)
	            .attr('dy', `${++lineNumber * lineHeight + dy}em`);
	        }
	      }
	    });
	  }

	  // Tooltips

	  tooltipFactory(tooltips) {
	    return (d) => {
	      let tipText = '';

	      if (tooltips !== undefined) {
	        for (let i = 0; i < tooltips.length; i = i + 1) {
	          let value = tooltips[i].accessor(d);
	          if (tooltips[i].format !== undefined) {
	            value = tooltips[i].format(value);
	          }
	          tipText += `${tooltips[i].label}: ${value}</br>`;
	        }
	      }

	      return tipText;
	    };
	  }

	  lineDefaultTooltip(
	    xLabel,
	    xFormat,
	    xAccessor,
	    yLabel,
	    yFormat,
	    yAccessor,
	    seriesAccessor
	  ) {
	    return (d) => {
	      let tipText = '';
	      if (seriesAccessor(d))
	        tipText = `Series: ${seriesAccessor(d)}</br>`;
	      tipText += `${xLabel}: ${xFormat(xAccessor(d))}</br>`;
	      tipText += `${yLabel}: ${yFormat(yAccessor(d))}`;
	      return tipText;
	    }
	  }

	  donutDefaultTooltip(labelAccessor, valueAccessor, percentageAccessor) {
	    return (d) =>
	      `${labelAccessor(d)}: ${valueAccessor(d)} (${percentageAccessor(d)})`
	  }

	  static mapMonthYearDataToSeries(data, customOptions) {
	    const defaults = {
	      dateField: 'x',
	      yValue: 'y',
	      yPercent: 'p'
	    };

	    const options = Object.assign({},
	      defaults,
	      customOptions
	    );

	    const series = {};
	    series.name = 'All Time';
	    series.values = [];
	    data[options.dateField].map((datum, i) => {
	      series.values.push({
	        xValue: new Date(Math.floor(data[options.dateField][i] / 100), (data[options.dateField][i] % 100) - 1, 1),
	        yValue: data[options.yValue][i],
	        yPercent: data[options.yPercent][i]
	      });
	    });
	    series.values.sort((a, b) => a.xValue - b.xValue);

	    return [series]; // return series wrapped in an array
	  }

	  static prepareData(rawData, chartType) {
	    switch (chartType) {
	      case this.chartTypes.BOXPLOT:
	        if (!rawData.CATEGORY.length) {
		        return null;
		      }
		      const data = rawData.CATEGORY.map((d,i) => ({
		        Category: rawData.CATEGORY[i],
		        min: rawData.MIN_VALUE[i],
		        max: rawData.MAX_VALUE[i],
		        median: rawData.MEDIAN_VALUE[i],
		        LIF: rawData.P10_VALUE[i],
		        q1: rawData.P25_VALUE[i],
		        q3: rawData.P75_VALUE[i],
		        UIF: rawData.P90_VALUE[i],
		      }), rawData);
		      const values = Object.values(data);
		      const flattenData = values.reduce((accumulator, currentValue) =>
		      		accumulator.concat(currentValue),
		      		[]
		      	);
		      if (!flattenData.length) {
		        return null;
		      }

		      return data;
	    }
	  }

		dispose() {
			this.destroyTipIfExists();
			if (this.doResize) {
				window.removeEventListener("resize", this.doResize);
			}
		}

	}

	return Chart;
});

/* 

Copyright 2017 Observational Health Data Sciences and Informatics

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Authors: Christopher Knoll

*/

define('atlascharts/aster',["d3", "./chart"], function (d3, Chart) {
	"use strict";

	class Aster extends Chart {
		render(data, target, w, h, chartOptions) {
			super.render(data, target, w, h, chartOptions);
			// options
			const options = this.getOptions({
				maxPercent: 100.0
			}, chartOptions);
			// container
			const svg = this.createSvg(target, w, h);

			const chart = svg.append("g")
				.attr('transform', `translate(${w / 2}, ${h / 2})`);

			// arc dimensions
			const radius = Math.min(w - 10, h - 10) / 2,
				innerRadius = 0.3 * radius;

			// linear scale
			const r = d3.scaleLinear()
				.domain([0, options.maxPercent])
				.range([innerRadius, radius]);

			const arc = d3.arc()
				.innerRadius(innerRadius)
				.outerRadius(d => r(d.data.percent));

			const outlineArc = d3.arc()
				.innerRadius(innerRadius)
				.outerRadius(radius);

			const arcRange = [0, 2 * Math.PI];

			const pie = d3.pie()
				.sort(null)
				.startAngle(arcRange[0])
				.endAngle(arcRange[1])
				.value(function (d) {
					return d.weight;
				});

			if (data.length > 1) {
				pie.padAngle(.01)
			}

			const path = chart.selectAll(".solidArc")
				.data(pie(data))
				.enter().append("path")
				.attr("fill", d => options.colors(d.data.id))
				.attr("class", "solidArc")
				//.attr("stroke", "gray")
				.attr("d", arc);

			const outerPath = chart.selectAll(".outlineArc")
				.data(pie(data))
				.enter().append("path")
				.attr("fill", "none")
				.attr("stroke", d => options.colors(d.data.id))
				.attr("class", "outlineArc")
				.attr("d", outlineArc);

			if (options.asterLabel) {
				svg.append("svg:text")
					.attr("class", "aster-label")
					.attr("dy", ".35em")
					.attr("text-anchor", "middle") // text-align: right
					.text(asterLabel());
			}

			//Wrapper for the grid & axes
			var axisGrid = chart.append("g").attr("class", "axisWrapper");
			const levels = Math.ceil(options.maxPercent / 25.0);

			for (var level = 1; level < levels; level++) {
				axisGrid.append("circle")
					.attr("class", "gridCircle")
					.attr("r", r(level * 25))
					.style("fill", "none")
					.style("stroke", "#c5c5c5")
					.style("stroke-width", 0.6);

				if (level % 2 == 1) {
					axisGrid.append("rect")
						.attr("x", -8)
						.attr("y", -r(level * 25) - 5)
						.attr("width", 20)
						.style("height", 10)
						.attr("fill", "#fff");

					axisGrid.append("text")
						.attr("class", "axisLabel")
						.attr("x", -6)
						.attr("y", -r(level * 25))
						.attr("dy",  ".4em")
						.style("font-size", "8px")
						.attr("fill", "#737373")
						.text(function (d, i) {
							return `${25 * level}%`
						});
				}
			}

			/*
			//Text indicating at what % each level is
			axisGrid.selectAll(".axisLabel")
				 .data(d3.range(1,(cfg.levels+1)).reverse())
				 .enter().append("text")
				 .attr("class", "axisLabel")
				 .attr("x", 4)
				 .attr("y", function(d){return -d*radius/cfg.levels;})
				 .attr("dy", "0.4em")
				 .style("font-size", "10px")
				 .attr("fill", "#737373")
				 .text(function(d,i) { return Format(maxValue * d/cfg.levels); });
		  */
		}
	}

	return Aster;

});
/* 

Copyright 2017 Observational Health Data Sciences and Informatics

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Authors: Christopher Knoll

*/

define('atlascharts/areachart',["d3", "./chart"], function(d3, Chart) {
	"use strict";

	class AreaChart extends Chart {
		render (data, target, w, h, options) {
			super.render(data, target, w, h, options); 
			var defaults = {
				margin: {
					top: 20,
					right: 30,
					bottom: 20,
					left: 40
				},
				yTicks: 4,
				xFormat: d3.format(',.0f'),
				yFormat: d3.format('s'),
			};
			options = Object.assign({}, defaults, options);

			var width = w - options.margin.left - options.margin.right,
				height = h - options.margin.top - options.margin.bottom;

			var x = d3.scaleLinear()
				.domain(d3.extent(data, function (d) {
					return d.x;
				}))
				.range([0, width]);

			var y = d3.scaleLinear()
				.domain([0, d3.max(data, function (d) {
					return d.y;
				})])
				.range([height, 0]);

			var xAxis = d3.axisBottom()
				.scale(x)
				.tickFormat(options.xFormat)
				.ticks(10);

			var yAxis = d3.axisLeft()
				.scale(y)
				.tickFormat(options.yFormat)
				.ticks(options.yTicks);

			var area = d3.area()
				.x(function (d) {
					return x(d.x);
				})
				.y0(height)
				.y1(function (d) {
					return y(d.y);
				});

			const chart = this.createSvg(target, w, h);
			
			var vis = chart.append("g")
				.attr("transform", "translate(" + options.margin.left + "," + options.margin.top + ")");

			vis.append("path")
				.data([data])
				.attr("class", "area")
				.attr("d", area);

			vis.append("g")
				.attr("class", "x axis")
				.attr("transform", "translate(0," + height + ")")
				.call(xAxis);

			vis.append("g")
				.attr("class", "y axis")
				.call(yAxis);

		};
	};
	
	return AreaChart;
	
});

/* 

Copyright 2017 Observational Health Data Sciences and Informatics

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Authors: Christopher Knoll

*/

define('atlascharts/barchart',["d3", "./chart"],
	function(d3, Chart) {
	"use strict";

	class BarChart extends Chart {
	  get formatters() {
	    return {
	      commaseparated: d3.format(','),
	      formatpercent: d3.format('.1%'),
	    };
	  }

	  render(data, target, w, h, chartOptions) {
			super.render(data, target, w, h, chartOptions);
	    // options
	    const defaults = {
	      label: 'label',
	      value: 'value',
	      rotate: 0,
	      textAnchor: 'middle',
	      showLabels: false,
	    };
	    const options = this.getOptions(defaults, chartOptions);
	    // conatainer
	    let svg = this.createSvg(target, w, h);

	    this.useTip((tip) => {
	      tip.attr('class', 'd3-tip')
	      .offset([-10, 0])
	      .html(d => d.value);
	    });

	    const label = options.label;
	    const value = options.value;

	    let total = 0;
	    data.forEach((d) => {
	      total = total + d[value];
	    });

	    let width = w - options.margins.left - options.margins.right;
	    let height = h - options.margins.top - options.margins.bottom;
			
	    // axes
	    const x = d3.scaleBand()
	      .range([0, width])
				.padding(.1)
	      .round(1.0 / data.length);

	    const y = d3.scaleLinear()
	      .range([height, 0]);

	    const xAxis = d3.axisBottom()
	      .scale(x)
	      .tickSize(2, 0);

	    const yAxis = d3.axisLeft()
	      .scale(y)
	      .tickFormat(options.yFormat)
	      .ticks(5);

	    x.domain(data.map(d => d[label]));
	    y.domain([0, options.yMax || d3.max(data, d => d[value])]);

	    // create temporary x axis
	    const tempXAxis = svg.append('g').attr('class', 'axis');
	    tempXAxis.call(xAxis);

	    // update width & height based on temp xaxis dimension and remove
	    const xAxisHeight = Math.round(tempXAxis.node().getBBox().height);
	    const xAxisWidth = Math.round(tempXAxis.node().getBBox().width);
	    height -= xAxisHeight;
	    width -= Math.max(0, (xAxisWidth - width)); // trim width if
	    // xAxisWidth bleeds over the allocated width.
	    tempXAxis.remove();

	    // create temporary y axis
	    const tempYAxis = svg.append('g').attr('class', 'axis');
	    tempYAxis.call(yAxis);

	    // update height based on temp xaxis dimension and remove
	    const yAxisWidth = Math.round(tempYAxis.node().getBBox().width);
	    width -= yAxisWidth;
	    tempYAxis.remove();

	    // reset axis ranges
	    x.range([0, width]);
	    y.range([height, 0]);
			
			svg = svg.append('g')
	      .attr('transform', `translate(
	          ${options.margins.left + yAxisWidth},
	          ${options.margins.top}
	        )`);
			
	    svg.append('g')
	      .attr('class', 'x axis')
	      .attr('transform', `translate(0, ${height})`)
	      .call(xAxis)
	      .selectAll('.tick text')
	      .style('text-anchor', options.textAnchor)
	      .attr('transform', d => `rotate(${options.rotate})`);

	    if (options.wrap) {
	      svg.selectAll('.tick text')
	        .call(this.wrap, x.bandwidth());
	    }

	    svg.append('g')
	      .attr('class', 'y axis')
	      .attr('transform', 'translate(0, 0)')
	      .call(yAxis);

	    svg.selectAll('.bar')
	      .data(data)
	      .enter()
	      .append('rect')
	      .attr('class', 'bar')
	      .attr('x', d => x(d[label]))
	      .attr('width', x.bandwidth())
	      .attr('y', d => y(d[value]))
	      .attr('height', d => height - y(d[value]))
	      .attr('title', (d) => {
	        let temp_title = `${d[label]}: ${this.formatters.commaseparated(d[value], ',')}`;
	        if (total > 0) {
	          temp_title += ` (${this.formatters.formatpercent(d[value] / total)})`;
	        } else {
	          temp_title += ` (${this.formatters.formatpercent(0)})`;
	        }
	        return temp_title;
	      })
	      .style('fill', d => options.colors(d[label]))
	      .on('mouseover', d => this.tip.show(d, event.target))
	      .on('mouseout', d => this.tip.hide(d, event.target))
	      .exit()
	      .remove();

	    if (options.showLabels) {
	      svg.selectAll('.barlabel')
	        .data(data)
	        .enter()
	        .append('text')
	        .attr('class', 'barlabel')
	        .text(d => this.formatters.formatpercent(d[value] / total))
	        .attr('x', d => x(d[label]) + x.bandwidth() / 2)
	        .attr('y', d => y(d[value]) - 3)
	        .attr('text-anchor', 'middle');
	    }
	  }
	}

	return BarChart;
});

/* 

Copyright 2017 Observational Health Data Sciences and Informatics

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Authors: Christopher Knoll, Mark Valez, Sigfried Gold, Alexander Saltykov

*/

define('atlascharts/boxplot',["d3", "./chart"],
	function(d3, Chart) {
	"use strict";

	class Boxplot extends Chart {
		defaultTip(tip, options) {

			tip.attr('class', 'd3-tip')
			.offset(d => d.tipOffset || [-10,0])
			.direction(d => d.tipDirection || "n")
			.html(d =>
				`<table class='boxplotValues'>
					<tr>
						<td>Max:</td>
						<td>${options.valueFormatter(d.max)}</td>
					</tr>
					<tr>
						<td>P90:</td>
						<td>${options.valueFormatter(d.UIF)}</td>
					</tr>
					<tr>
						<td>P75:</td>
						<td>${options.valueFormatter(d.q3)}</td>
					</tr>
					<tr>
						<td>Median:</td>
						<td>${options.valueFormatter(d.median)}</td>
					</tr>
					<tr>
						<td>P25:</td>
						<td>${options.valueFormatter(d.q1)}</td>
					</tr>
					<tr>
						<td>P10:</td>
						<td>${options.valueFormatter(d.LIF)}</td>
					</tr>
					<tr>
						<td>Min:</td>
						<td>${options.valueFormatter(d.min)}</td>
					</tr>
				</table>`
			);
		}
		
	  render(data, target, w, h, chartOptions) {
			super.render(data, target, w, h, chartOptions);
	    // options
			const defaults = {valueFormatter: this.formatters.formatSI(3)};
			const options = this.getOptions(defaults, chartOptions);
	    // container
	    const svg = this.createSvg(target, w, h);

			const valueFormatter = options.valueFormatter;

	    this.useTip(this.defaultTip, options);

	    // apply labels (if specified) and offset margins accordingly
	    let xAxisLabelHeight = 0;
	    let yAxisLabelWidth = 0;
	    if (options.xLabel) {
	      const xAxisLabel = svg.append('g')
	        .attr('transform', `translate(${w / 2}, ${h - options.margins.bottom})`)

	      xAxisLabel.append('text')
	        .attr('class', 'axislabel')
	        .style('text-anchor', 'middle')
	        .text(options.xLabel);

	      const bbox = xAxisLabel.node().getBBox();
	      xAxisLabelHeight = bbox.height;
	    }

	    if (options.yLabel) {
	      const yAxisLabel = svg.append('g')
	        .attr(
	          'transform',
	          `translate(
	            ${options.margins.left},
	            ${((h - options.margins.bottom - options.margins.top) / 2) + options.margins.top}
	          )`
	        );
	      yAxisLabel.append('text')
	        .attr('class', 'axislabel')
	        .attr('transform', 'rotate(-90)')
	        .attr('y', 0)
	        .attr('x', 0)
	        .attr('dy', '1em')
	        .style('text-anchor', 'middle')
	        .text(options.yLabel);

	      const bbox = yAxisLabel.node().getBBox();
	      yAxisLabelWidth = bbox.width;
	    }

	    let width = w - options.margins.left - yAxisLabelWidth - options.margins.right;
	    let height = h - options.margins.top - xAxisLabelHeight - options.margins.bottom;

	    // define the intial scale (range will be updated after we determine the final dimensions)
	    const x = d3.scaleBand()
	      .range([0, width])
	      .round(1.0 / data.length)
	      .domain(data.map(d => d.Category));
	    const y = d3.scaleLinear()
	      .range([height, 0])
	      .domain([options.yMin || 0, options.yMax || d3.max(data, d => d.max)]);

	    const xAxis = d3.axisBottom()
	      .scale(x);
	    const yAxis = d3.axisLeft()
	      .scale(y)
	      .tickFormat(options.yFormat)
	      .ticks(5);

	    // create temporary x axis
	    const tempXAxis = svg.append('g').attr('class', 'axis');
	    tempXAxis.call(xAxis);

	    // update width & height based on temp xaxis dimension and remove
	    const xAxisHeight = Math.round(tempXAxis.node().getBBox().height);
	    const xAxisWidth = Math.round(tempXAxis.node().getBBox().width);
	    height -= xAxisHeight;
	    width -= Math.max(0, (xAxisWidth - width)); // trim width if
	    // xAxisWidth bleeds over the allocated width.
	    tempXAxis.remove();

	    // create temporary y axis
	    const tempYAxis = svg.append('g').attr('class', 'axis');
	    tempYAxis.call(yAxis);

	    // update height based on temp xaxis dimension and remove
	    const yAxisWidth = Math.round(tempYAxis.node().getBBox().width);
	    width -= yAxisWidth;
	    tempYAxis.remove();

	    // reset axis ranges
	    x.range([0, width]);
	    y.range([height, 0]);

	    const boxWidth = 10;
	    let boxOffset = (x.bandwidth() / 2) - (boxWidth / 2);
	    let whiskerWidth = boxWidth / 2;
	    let whiskerOffset = (x.bandwidth() / 2) - (whiskerWidth / 2);

	    const chart = svg.append('g')
	      .attr('transform', `translate(
	          ${options.margins.left + yAxisLabelWidth + yAxisWidth},
	          ${options.margins.top}
	        )`);

	    // draw main box and whisker plots
	    const boxplots = chart.selectAll('.boxplot')
	      .data(data)
	      .enter().append('g')
	      .attr('class', 'boxplot')
	      .attr('transform', d => `translate(${x(d.Category)}, 0)`);

	    const self = this;

	    // for each g element (containing the boxplot render surface), draw the whiskers, bars and rects
	    boxplots.each(function (d) {
	      const boxplot = d3.select(this);
	      if (d.LIF != d.q1) { // draw whisker
	        boxplot.append('line')
	          .attr('class', 'bar')
	          .attr('x1', whiskerOffset)
	          .attr('y1', y(d.LIF))
	          .attr('x2', whiskerOffset + whiskerWidth)
	          .attr('y2', y(d.LIF));
	        boxplot.append('line')
	          .attr('class', 'whisker')
	          .attr('x1', x.bandwidth() / 2)
	          .attr('y1', y(d.LIF))
	          .attr('x2', x.bandwidth() / 2)
	          .attr('y2', y(d.q1));
	      }

	      boxplot.append('rect')
	        .attr('class', 'box')
	        .attr('x', boxOffset)
	        .attr('y', y(d.q3))
	        .attr('width', boxWidth)
	        .attr('height', Math.max(1, y(d.q1) - y(d.q3)))
	        .on('mouseover', d => self.tip.show(d, event.target))
	        .on('mouseout', d => self.tip.hide(d, event.target));

	      boxplot.append('line')
	        .attr('class', 'median')
	        .attr('x1', boxOffset)
	        .attr('y1', y(d.median))
	        .attr('x2', boxOffset + boxWidth)
	        .attr('y2', y(d.median));

	      if (d.UIF != d.q3) { // draw whisker
	        boxplot.append('line')
	          .attr('class', 'bar')
	          .attr('x1', whiskerOffset)
	          .attr('y1', y(d.UIF))
	          .attr('x2', x.bandwidth() - whiskerOffset)
	          .attr('y2', y(d.UIF));
	        boxplot.append('line')
	          .attr('class', 'whisker')
	          .attr('x1', x.bandwidth() / 2)
	          .attr('y1', y(d.UIF))
	          .attr('x2', x.bandwidth() / 2)
	          .attr('y2', y(d.q3));
	      }
	      // to do: add max/min indicators
	    });

	    // draw x and y axis
	    chart.append('g')
	      .attr('class', 'x axis')
	      .attr('transform', `translate(0, ${height})`)
	      .call(xAxis);

	    chart.selectAll('.tick text')
	      .call(this.wrap, x.bandwidth() || x.range());

	    chart.append('g')
	      .attr('class', 'y axis')
	      .attr('transform', `translate(0, 0)`)
	      .call(yAxis);
	  }
	}
	
	return Boxplot;
	
});

/* 

Copyright 2017 Observational Health Data Sciences and Informatics

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Authors: Christopher Knoll, Mark Valez, Sigfried Gold, Alexander Saltykov

*/

define('atlascharts/donut',["d3", "numeral", "./chart"],
	function(d3, numeral, Chart) {
	"use strict";

	class Donut extends Chart {
	  get formatters() {
	    return {
	      formatpercent: d3.format('.1%'),
	    };
	  }

	  render(data, target, w, h, chartOptions) {
			
			super.render(data,target,w,h,chartOptions);
			
	    // options
	    const options = this.getOptions(chartOptions);
	    // container
	    const svg = this.createSvg(target, w, h);    

	    function dragstarted() {
	      const legendContainer = d3.select(this);
	      legendContainer.attr('initialX', event.x);
	      legendContainer.attr('initialY', event.y);
	    }

	    function dragged() {
	      const legendContainer = d3.select(this);
	      const diffY = event.y - parseFloat(legendContainer.attr('initialY'));
	      if (isNaN(diffY)) {
	        return false;
	      }
	       legendContainer.attr('transform', `translate(
	        ${parseFloat(legendContainer.attr('initialPositionX'))},
	        ${parseFloat(legendContainer.attr('initialPositionY')) + diffY}
	      )`);
	    }

	    function dragended() {
	      const legendContainer = d3.select(this);
	      legendContainer.transition()
	        .duration(300)
	        .attr('transform', `translate(
	          ${legendContainer.attr('initialPositionX')},
	          ${legendContainer.attr('initialPositionY')}
	        )`);
	    }

	    let total = 0;
	    data.forEach((d) => {
	      total += +d.value;
	    });

	    const tooltipBuilder = this.donutDefaultTooltip(
	      (d) => d.label,
	      (d) => numeral(d.value).format('0,0'), 
	      (d) => this.formatters.formatpercent(total != 0 ? d.value / total : 0.0)
	    );    

	    this.useTip(tip =>
	      tip.attr('class', 'd3-tip')
	      .direction('s')
	      .offset([3, 0])
	      .html(tooltipBuilder));

	    if (data.length > 0) {
	      const vis = svg
	        .append('g')
	        .attr('id', 'chart');

	      // legend
	      const drag = d3.drag()
	        .on('drag', dragged)
	        .on('start', dragstarted)
	        .on('end', dragended);

	      const legend = svg.append('g')
	        .attr('class', 'legend')
	        .call(drag);

	      legend.selectAll('rect')
	        .data(data)
	        .enter()
	        .append('rect')
	        .attr('x', 0)
	        .attr('y', (d, i) => i * 15)
	        .attr('width', 10)
	        .attr('height', 10)
	        .style('fill', (d) => options.colors(d.id));

	      let legendWidth = 0;
	      const textDisplace = 12;
	      const legendItems = legend.selectAll('g.legend-item')
	        .data(data)
	        .enter()
	        .append('g')
	        .attr('class', 'legend-item');

	      legendItems
	        .append('text')
	        .attr('x', textDisplace)
	        .attr('y', (d, i) => (i * 15) + 9)
	        .text(d => d.label);

	      legendItems
	        .append('title')
	        .attr('x', textDisplace)
	        .attr('y', (d, i) => (i * 15) + 9)
	        .text(d => d.label);

	      legendItems.each(function() {
	        const legendItemWidth = this.getBBox().width;
	        if (legendItemWidth > legendWidth && legendWidth + legendItemWidth < w * 0.75) {
	          legendWidth = legendItemWidth;
	        }
	      });

	      legendWidth += textDisplace;
	      legend
	        .attr('transform', `translate(
	            ${w - legendWidth - options.margins.right},
	            ${options.margins.top}
	          )`)
	        .attr('initialPositionX', w - legendWidth - options.margins.right)
	        .attr('initialPositionY', options.margins.top);
	      vis
	        .attr('transform', `translate(${(w - legendWidth) / 2}, ${h / 2})`);

	      const or = Math.min(h, w-legendWidth) / 2 - options.margins.top;
	      const ir = Math.min(h, w-legendWidth) / 6 - options.margins.top;

	      const arc = d3.arc()
	        .innerRadius(ir)
	        .outerRadius(or);

	      const pie = d3.pie() // this will create arc data for us given a list of values
	        .value((d) => {
	          return d.value > 0 ? Math.max(d.value, total * .015) : 0;
	          // we want slices to appear if they have data, so we return a minimum of
	          // 1.5% of the overall total if the datapoint has a value > 0.
	        }); // we must tell it out to access the value of each element in our data array

	      const arcs = vis.selectAll('g.slice') // this selects all <g> elements with class slice (there aren't any yet)
	        .data(pie(data)) // associate the generated pie data (an array of arcs, each having startAngle, endAngle and value properties)
	        .enter() // this will create <g> elements for every 'extra' data element that should be associated with a selection. The result is creating a <g> for every object in the data array
	        .append('g') // create a group to hold each slice (we will have a <path> and a <text> element associated with each slice)
	        .attr('class', 'slice'); // allow us to style things in the slices (like text)

	      arcs.append('path')
	        .attr('fill', (d) => {
	          return options.colors(d.data.id);
	        }) // set the color for each slice to be chosen from the color function defined above
	        .attr('stroke', '#fff')
	        .attr('stroke-width', 5)
	        .attr('title', d => d.label)
	        .on('mouseover', d => this.tip.show(d.data, event.target))
	        .on('mouseout', d => this.tip.hide(d.data, event.target))
	        .attr('d', arc); // this creates the actual SVG path using the associated data (pie) with the arc drawing function

	      
	    } else {
	      svg.append('text')
	        .attr('transform', `translate(${w / 2}, ${h / 2})`)
	        .style('text-anchor', 'middle')
	        .text('No Data');
	    }
	  }
	}

	return Donut;
});




/*

Copyright 2017 Observational Health Data Sciences and Informatics

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Authors: Christopher Knoll, Alexander Saltykov

*/

define('atlascharts/histogram',["d3", "numeral", "./chart"],
	function(d3, numeral, Chart) {
	"use strict";

	class Histogram extends Chart {
	  static mapHistogram(histogramData) {
	    // result is an array of arrays, each element in the array is another array containing
	    // information about each bar of the histogram.
	    const result = [];
	    const offset = histogramData.OFFSET || 0;
	    const intervalSize = histogramData.INTERVAL_SIZE;

	    const tempData = this.normalizeDataframe(histogramData.DATA);
	    for (let i = 0; i < histogramData.INTERVALS; i += 1) {
	      const target = {};
	      target.x = offset + 1.0 * tempData.INTERVAL_INDEX[i] * intervalSize; // eslint-disable-line no-mixed-operators
	      target.dx = intervalSize;
	      target.y = tempData.COUNT_VALUE[i] || 0;
	      result.push(target);
	    }

	    return result;
	  }

	  drawBoxplot(g, data, width, height) {
	    const boxplot = g;
	    const x = this.xScale;
	    const whiskerHeight = height / 2;

	    if (data.LIF !== data.q1) { // draw whisker
	      boxplot.append('line')
	        .attr('class', 'bar')
	        .attr('x1', x(data.LIF))
	        .attr('y1', (height / 2) - (whiskerHeight / 2))
	        .attr('x2', x(data.LIF))
	        .attr('y2', (height / 2) + (whiskerHeight / 2));

	      boxplot.append('line')
	        .attr('class', 'whisker')
	        .attr('x1', x(data.LIF))
	        .attr('y1', height / 2)
	        .attr('x2', x(data.q1))
	        .attr('y2', height / 2);
	    }

	    boxplot.append('rect')
	      .attr('class', 'box')
	      .attr('x', x(data.q1))
	      .attr('width', x(data.q3) - x(data.q1))
	      .attr('height', height);

	    boxplot.append('line')
	      .attr('class', 'median')
	      .attr('x1', x(data.median))
	      .attr('y1', 0)
	      .attr('x2', x(data.median))
	      .attr('y2', height);

	    if (data.UIF !== data.q3) { // draw whisker
	      boxplot.append('line')
	        .attr('class', 'bar')
	        .attr('x1', x(data.UIF))
	        .attr('y1', (height / 2) - (whiskerHeight / 2))
	        .attr('x2', x(data.UIF))
	        .attr('y2', (height / 2) + (whiskerHeight / 2));

	      boxplot.append('line')
	        .attr('class', 'whisker')
	        .attr('x1', x(data.q3))
	        .attr('y1', height / 2)
	        .attr('x2', x(data.UIF))
	        .attr('y2', height / 2);
	    }
	  }

	  render(chartData, target, w, h, chartOptions) {

			super.render(chartData, target, w, h, chartOptions);

			// options
	    const defaults = {
	      ticks: 10,
	      yTicks: 4,
	      yScale: d3.scaleLinear(),
	      boxplotHeight: 10,
	      getTooltipBuilder: null,
	    };
	    const options = this.getOptions(defaults, chartOptions);
	    // container
	    const svg = this.createSvg(target, w, h);

	    this.xScale = {}; // shared xScale for histogram and boxplot
	    const data = chartData || []; // default to empty set if null is passed in

	    const tooltipBuilder = typeof options.getTooltipBuilder === 'function'
	    ? options.getTooltipBuilder(options)
	    : d => numeral(d.y).format('0,0');

	    this.useTip((tip) => {
	      tip.attr('class', 'd3-tip')
	        .offset([-10, 0])
	        .html(tooltipBuilder);
	    });

	    let xAxisLabelHeight = 0;
	    let yAxisLabelWidth = 0;

	    // apply labels (if specified) and offset margins accordingly
	    if (options.xLabel) {
	      const xAxisLabel = svg.append('g')
	        .attr('transform', `translate(${w / 2}, ${h - options.margins.bottom})`);

	      xAxisLabel.append('text')
	        .attr('class', 'axislabel')
	        .style('text-anchor', 'middle')
	        .text(options.xLabel);

	      const bbox = xAxisLabel.node().getBBox();
	      xAxisLabelHeight = bbox.height;
	    }

	    if (options.yLabel) {
	      const yAxisLabel = svg.append('g')
	        .attr(
	          'transform',
	          `translate(
	            ${options.margins.left},
	            ${((h - options.margins.bottom - options.margins.top) / 2) + options.margins.top}
	          )`);
	      yAxisLabel.append('text')
	        .attr('class', 'axislabel')
	        .attr('transform', 'rotate(-90)')
	        .attr('y', 0)
	        .attr('x', 0)
	        .attr('dy', '1em')
	        .style('text-anchor', 'middle')
	        .text(options.yLabel);

	      const bbox = yAxisLabel.node().getBBox();
	      yAxisLabelWidth = 1.5 * bbox.width; // width is calculated as
	      // 1.5 * box height due to rotation anomolies that
	      // cause the y axis label to appear shifted.
	    }

	    // calculate an intial width and height that does not take into account the tick text dimensions
	    let width = w - options.margins.left - options.margins.right - yAxisLabelWidth;
	    let height = h - options.margins.top - options.margins.bottom - xAxisLabelHeight;

	    // define the intial scale (range will be updated after we determine the final dimensions)
	    const x = this.xScale = d3.scaleLinear()
	      .domain(options.xDomain || [
	        d3.min(data, d => d.x),
	        d3.max(data, d => d.x + d.dx),
	      ])
	      .range([0, width]);

	    const xAxis = d3.axisBottom()
	      .scale(x)
	      .ticks(options.ticks)
	      .tickFormat(options.xFormat);

	    const y = options.yScale
	      .domain([0, options.yMax || d3.max(data, d => d.y)])
	      .range([height, 0]);

	    const yAxis = d3.axisLeft()
	      .scale(y)
	      .ticks(options.yTicks)
	      .tickFormat(options.yFormat);

	    // create temporary x axis
	    const tempXAxis = svg.append('g').attr('class', 'axis');
	    tempXAxis.call(xAxis);

	    // update width & height based on temp xaxis dimension and remove
	    const xAxisHeight = Math.round(tempXAxis.node().getBBox().height);
	    const xAxisWidth = Math.round(tempXAxis.node().getBBox().width);
	    height -= xAxisHeight;
	    width -= Math.max(0, (xAxisWidth - width)); // trim width if
	    // xAxisWidth bleeds over the allocated width.
	    tempXAxis.remove();


	    // create temporary y axis
	    const tempYAxis = svg.append('g').attr('class', 'axis');
	    tempYAxis.call(yAxis);

	    // update height based on temp xaxis dimension and remove
	    const yAxisWidth = Math.round(tempYAxis.node().getBBox().width);
	    width -= yAxisWidth;
	    tempYAxis.remove();

	    if (options.boxplot) {
	      height -= 12; // boxplot takes up 12 vertical space
	      const boxplotG = svg.append('g')
	        .attr('class', 'boxplot')
	        .attr(
	          'transform',
	          `translate(${(options.margins.left + yAxisLabelWidth + yAxisWidth)},
	          ${(options.margins.top + height + xAxisHeight)})`
	        );
	      this.drawBoxplot(boxplotG, options.boxplot, width, 8);
	    }

	    // reset axis ranges
	    x.range([0, width]);
	    y.range([height, 0]);

	    const hist = svg.append('g')
	      .attr('transform', `translate(
	        ${options.margins.left + yAxisLabelWidth + yAxisWidth},
	        ${options.margins.top})`
	      );

	    const bar = hist.selectAll('.bar')
	      .data(data)
	      .enter().append('g')
	      .attr('class', 'bar')
	      .attr('transform', d => `translate(${x(d.x)}, ${y(d.y)})`)
	      .on('mouseover', d => this.tip.show(d, event.target))
	      .on('mouseout', d => this.tip.hide(d, event.target));

	    bar.append('rect')
	      .attr('x', 1)
	      .attr('width', d => Math.max((x(d.x + d.dx) - x(d.x) - 1), 0.5))
	      .attr('height', d => height - y(d.y));

	    hist.append('g')
	      .attr('class', 'x axis')
	      .attr('transform', `translate(0, ${height})`)
	      .call(xAxis);

	    hist.append('g')
	      .attr('class', 'y axis')
	      .attr('transform', 'translate(0, 0)')
	      .call(yAxis);
	  }
	}

	return Histogram;

});

/* 

Copyright 2017 Observational Health Data Sciences and Informatics

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Authors: Christopher Knoll, Mark Valez, Sigfried Gold, Alexander Saltykov

*/
define('atlascharts/line',["d3", "./chart"],
	function(d3, Chart) {
	"use strict";

	class Line extends Chart {
	  get interpolation() {
	    return {
	      linear: d3.curveLinear,
	      curveStep: d3.curveStep,
	      curveStepBefore: d3.curveStepBefore,
	      curveStepAfter: d3.curveStepAfter,
	      curveBasis: d3.curveBasis,
	      curveCardinal: d3.curveCardinal,
	      curveMonotoneX: d3.curveMonotoneX,
	      curveCatmullRom: d3.curveCatmullRom,
	    };
	  }

	  static convertData(data) {
      // convert data to multi-series format if not already formatted
      if (!data[0].hasOwnProperty('values')) {
        // assumes data is just an array of values (single series)
        data = [
          {
            name: '',
            values: data
          }
        ];
      }
      return data;
		}

    static getMinValue(data, key) {
      return d3.min(data, d => d3.min(d.values, d => d[key]));
    }

    static getMaxValue(data, key) {
      return d3.max(data, d => d3.max(d.values, d => d[key]));
    }

    static getZeroBasedY({ data, yValue, height }) {
      const maxY = Line.getMaxValue(data, yValue);

      return d3.scaleLinear()
        .domain([0, maxY])
        .range([height, 0]);
		}

    static getRelativeY({ data, yValue = "yValue", height, yRangePadding = 0.1, defaultYRangePadding = 10 }) {
      data = Line.convertData(data);

      const minY = Line.getMinValue(data, yValue);
      const maxY = Line.getMaxValue(data, yValue);
      const padding = ((maxY - minY) * yRangePadding) || defaultYRangePadding;

      return d3.scaleLinear()
        .domain([minY - padding, maxY + padding])
        .range([height, 0]);
    }


    render(data, target, w, h, chartOptions) {

			super.render(data,target,w,h,chartOptions);
			
			if (typeof target == "string") {
        target = document.querySelector(target);
      }
      
      
      // options
	    const defaults = {
	      xFormat: this.formatters.formatSI(3),
	      yFormat: this.formatters.formatSI(3),
	      interpolate: this.interpolation.linear,
	      seriesName: 'SERIES_NAME',
	      xValue: 'xValue',
	      yValue: 'yValue',
	      cssClass: 'lineplot',
	      ticks: 10,
	      yTicks: 4,
	      showSeriesLabel: false,
	      labelIndexDate: false,
	      colorBasedOnIndex: false,
        getTooltipBuilder: null,
      };
      const options = this.getOptions(defaults, chartOptions);
      
      // container SVG
      const svg = this.createSvg(target, w, h);

      const tooltipBuilder = typeof options.getTooltipBuilder === 'function'
				? options.getTooltipBuilder(options)
				: this.lineDefaultTooltip(
						options.xLabel || 'x',
						options.xFormat,
						d => d[options.xValue],
						options.yLabel || 'y',
						options.yFormat,
						d => d[options.yValue],
						d => d[options.seriesName]
					);

	    if (data.length > 0) {
	      data = Line.convertData(data);

	      this.useTip((tip) => {
	        tip.attr('class', 'd3-tip')
	          .offset([-10, 0])
	          .html(tooltipBuilder);
	      });

	      let xAxisLabelHeight = 0;
	      let yAxisLabelWidth = 0;
	      let bbox;
	      // apply labels (if specified) and offset margins accordingly
	      if (options.xLabel) {
	        var xAxisLabel = svg.append('g')
	          .attr('transform', `translate(${w / 2}, ${h - options.margins.bottom})`);

	        xAxisLabel.append('text')
	          .attr('class', 'axislabel')
	          .style('text-anchor', 'middle')
	          .text(options.xLabel);

	        bbox = xAxisLabel.node().getBBox();
	        xAxisLabelHeight += bbox.height;
	      }

	      if (options.yLabel) {
	        var yAxisLabel = svg.append('g')
	          .attr(
	            'transform',
	            `translate(
	              ${options.margins.left},
	              ${((h - options.margins.bottom - options.margins.top) / 2) + options.margins.top}
	            )`);
	        yAxisLabel.append('text')
	          .attr('class', 'axislabel')
	          .attr('transform', 'rotate(-90)')
	          .attr('y', 0)
	          .attr('x', 0)
	          .attr('dy', '1em')
	          .style('text-anchor', 'middle')
	          .text(options.yLabel);

	        bbox = yAxisLabel.node().getBBox();
	        yAxisLabelWidth = bbox.width * 1.2; // padding 20% of label width.
	      }

	      let legendWidth = 0;
	      if (options.showLegend) {
	        const legend = svg.append('g')
	          .attr('class', 'legend');

	        let maxWidth = 0;

	        data.forEach((d, i) => {
	          legend.append('rect')
	            .attr('x', 0)
	            .attr('y', (i * 15))
	            .attr('width', 10)
	            .attr('height', 10)
	            .style('fill', options.colors(d.name));

	          const legendItem = legend.append('text')
	            .attr('x', 12)
	            .attr('y', (i * 15) + 9)
	            .text(d.name);
	          maxWidth = Math.max(legendItem.node().getBBox().width + 12, maxWidth);
	        });
	        legend.attr('transform', `translate(
	          ${w - options.margins.right - maxWidth},
	          ${options.margins.top}
	        )`);
	        legendWidth += maxWidth + 5;
          
          if (legendWidth > w/3) {
            legend.style('display',"none");
          }
	      }

	      // calculate an intial width and height that does not take into account the tick text dimensions
	      let width = w - options.margins.left - options.margins.right - yAxisLabelWidth - (legendWidth > w/5 ? 0 : legendWidth);
	      let height = h - options.margins.top - options.margins.bottom - xAxisLabelHeight;

	      // define the intial scale (range will be updated after we determine the final dimensions)
	      const x = options.xScale || d3.scaleLinear()
	        .domain([
	          d3.min(data, d => d3.min(d.values, d => d[options.xValue])),
	          d3.max(data, d => d3.max(d.values, d => d[options.xValue]))
	        ]);

	      const xAxis = d3.axisBottom()
	        .scale(x)
	        .ticks(options.ticks);

	      // check for custom tick formatter
	      if (options.tickFormat) {
	        xAxis.tickFormat(options.tickFormat);
	      } else // apply standard formatter
	      {
	        xAxis.tickFormat(options.xFormat);
	      }

	      // if x scale is ordinal, then apply rangeRoundBands, else apply standard range.
	      if (typeof x.rangePoints === 'function') {
	        x.rangePoints([0, width]);
	      } else {
	        x.range([0, width]);
	      }

	      const y = options.yScale || Line.getZeroBasedY({ data, height, yValue: options.yValue });

	      const yAxis = d3.axisLeft()
	        .scale(y)
	        .tickFormat(options.yFormat)
	        .ticks(options.yTicks);


				const tempXAxis = svg.append('g').attr('class', 'axis');
	      tempXAxis.call(xAxis);
	      const xAxisHeight = Math.round(tempXAxis.node().getBBox().height);
	      const xAxisWidth = Math.round(tempXAxis.node().getBBox().width);
	      height = height - xAxisHeight;
	      width = width - Math.max(0, (xAxisWidth - width));
	      // trim width if xAxisWidth bleeds over the allocated width.
	      tempXAxis.remove();

	      let yAxisWidth = options.yAxisWidth;
        
        if (options.yAxisWidth == undefined) {
          const tempYAxis = svg.append('g').attr('class', 'axis');
          tempYAxis.call(yAxis);

          // update height based on temp xaxis dimension and remove
          yAxisWidth = Math.round(tempYAxis.node().getBBox().width);
          tempYAxis.remove();
        }

        width = width - yAxisWidth;

	      // reset axis ranges
	      // if x scale is ordinal, then apply rangeRoundBands, else apply standard range.
	      if (typeof x.rangePoints === 'function') {
	        x.rangePoints([0, width]);
	      } else {
	        x.range([0, width]);
	      }
	      y.range([height, 0]);

	      // create a line function that can convert data[] into x and y points

	      const line = d3.line()
	        .x(d => x(d[options.xValue]))
	        .y(d => y(d[options.yValue]))
	        .curve(options.interpolate);

	      const vis = svg.append('g')
	        .attr('class', options.cssClass)
	        .attr(
	          'transform',
	          `translate(
	            ${options.margins.left + yAxisLabelWidth + yAxisWidth},
	            ${options.margins.top}
	          )`
	        );

	      const series = vis.selectAll('.series')
	        .data(data)
	        .enter()
	        .append('g');

	      const seriesLines = series.append('path')
	        .attr('class', 'line')
	        .attr('d', d =>
	          line(
	            d.values.sort((a, b) =>
	              d3.ascending(
	                a[options.xValue],
	                b[options.xValue]
	              )
	            )
	          )
	        );

	      if (options.colors) {
	        seriesLines.style('stroke', (d, i) => options.colors(d.name));
	      }

	      if (options.showSeriesLabel) {
	        series.append('text')
	          .datum(d => ({
	              name: d.name,
	              value: d.values[d.values.length - 1]
	            })
	          )
	          .attr('transform', d =>
	            `translate(${x(d.value[options.xValue])}, ${y(d.value[options.yValue])})`
	          )
	          .attr('x', 3)
	          .attr('dy', 2)
	          .style('font-size', '8px')
	          .text(d => d.name);
	      }
	      const indexPoints = {
	        x: 0,
	        y: 0
	      };

        vis.append('g')
	        .attr('class', 'x axis')
	        .attr('transform', `translate(0, ${height})`)
	        .call(xAxis);

	      vis.append('g')
	        .attr('class', 'y axis')
	        .call(yAxis);


	      if (options.labelIndexDate) {
	        vis.append('rect')
	          .attr('transform', `translate(${indexPoints.x - 0.5}, ${indexPoints.y})`)
	          .attr('width', 1)
	          .attr('height', height);
	      }

        this.appendTracker({
          vis,
          data,
          width,
          height,
          x,
          y,
          options
        });

	    } else {
	      svg.append('text')
	        .attr('transform', `translate(${w / 2}, ${h / 2})`)
	        .style('text-anchor', 'middle')
	        .text('No Data');
	    }

	  }
	  
	  appendTracker({vis, data, width, height, x, y, options}) {
      const xLineClass = "x-hover-line";
	  	
      const tracker = vis.append("g")
        .attr("class", "current-focus")
        .style("display", "none");

      const line = tracker.append("line")
        .attr("class", xLineClass)
        .style("stroke-width", "2px")
        .style("stroke-dasharray", "3,3")
        .attr("y1", 0);

      const circle = tracker.append("circle")
        .attr("r", 2);
      
      const rect = vis.append("rect")
				.style("opacity", 0);

      // will use a quadtree to identify datanodes via x/y
      const tree = d3.quadtree()
        .x(d => x(d[options.xValue]))
        .y(d => y(d[options.yValue]));
      
      const flatData = data.reduce((flattened, series) => {
        return flattened.concat(series.values.map(row => {
          row.name = series.name
          return row;
        }));
      },[]);
      
      var lastDatum = null;
      
      tree.addAll(flatData);

      rect
        .attr("class", "overlay")
        .attr("width", width)
        .attr("height", height)
        .attr('pointer-events', 'all')
        .on("mouseover", () => tracker.style("display", null))
        .on("mouseout", () => {
          tracker.style("display", "none");
          this.tip.hide({}, tracker.node());
        });

      rect.on("mousemove", () => {
        const e = d3.event, mouse = d3.mouse(e.target);

        const d = tree.find(mouse[0], mouse[1]);
        
        // set tracker element styles
        circle.style("fill", options.colors(d.name));
        line.style("stroke", options.colors(d.name));
        line.attr("y2", height - y(d[options.yValue]));
        
        tracker.attr("transform", "translate(" + x(d[options.xValue]) + "," + y(d[options.yValue]) + ")");
        this.tip.show(d, tracker.node());
        
      })
		}

	}
	
	return Line;
	
});

/*

Copyright 2017 Observational Health Data Sciences and Informatics

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Authors: Christopher Knoll

*/

define('atlascharts/trellisline',["d3", "./chart"],
	function(d3, Chart) {
	"use strict";

	class Trellisline extends Chart {
	  render(dataByTrellis, target, w, h, chartOptions) {
			super.render(dataByTrellis, target, w, h, chartOptions);
	    // options
	    const defaults = {
	      trellisSet: d3.keys(dataByTrellis),
	      yTicks: 4,
	      xFormat: d3.format('d'),
	      yFormat: d3.format('d'),
	      interpolate: d3.curveLinear,
	    };
	    const options = this.getOptions(defaults, chartOptions);
	    // container
	    const svg = this.createSvg(target, w, h);

	    function mouseover() {
	      gTrellis.selectAll('.g-end').style('display', 'none');
	      gTrellis.selectAll('.g-value').style('display', null);
	      mousemove.call(this);
	    }

	    function mousemove() {
	      const date = seriesScale.invert(d3.mouse(event.target)[0]);
	      gTrellis.selectAll('.g-label-value.g-start').call(valueLabel, date);
	      gTrellis.selectAll('.g-label-year.g-start').call(yearLabel, date);
	      gTrellis.selectAll('.g-value').attr('transform', function (d) {
	        const s = d.values;
	        if (s) {
	          const v = s[bisect(s, date, 0, s.length - 1)];
	          const yValue = (v.Y_PREVALENCE_1000PP === 0 || v.Y_PREVALENCE_1000PP) ? v.Y_PREVALENCE_1000PP : v.yPrevalence1000Pp;
	          if (v && v.date) {
	            return 'translate(' + seriesScale(v.date) + ',' + yScale(yValue) + ')';
	          } else {
	            return 'translate(0,0);';
	          }
	        }
	      });
	    }

	    function mouseout() {
	      gTrellis.selectAll('.g-end').style('display', null);
	      gTrellis.selectAll('.g-label-value.g-start').call(valueLabel, minDate);
	      gTrellis.selectAll('.g-label-year.g-start').call(yearLabel, minDate);
	      gTrellis.selectAll('.g-label-year.g-end').call(yearLabel, maxDate);
	      gTrellis.selectAll('.g-value').style('display', 'none');
	    }

	    function valueLabel(text, date) {
	      const offsetScale = d3.scaleLinear().domain(seriesScale.range());
	      let items = [];
	      const it = {};
	      text.each(function(d, idx) {
	        const text = d3.select(this);
	        const s = d.values;
	        const i = bisect(s, date, 0, s.length - 1);
	        const j = Math.round(i / (s.length - 1) * (s.length - 12));
	        const v = s[i];
	        if (v && v.date) {
	          const x = seriesScale(v.date);
	          var yValue = (v.Y_PREVALENCE_1000PP === 0 || v.Y_PREVALENCE_1000PP)
	            ? v.Y_PREVALENCE_1000PP
	            : v.yPrevalence1000Pp;
	          const xPos = offsetScale.range([0, trellisScale.bandwidth()])(x);
	          const yPos = yScale(d3.max(s.slice(j, j + 12), d => yValue));
	          const trellisName = v.TRELLIS_NAME || v.trellisName;
	          if (trellisName) {
	            !it[trellisName] && (it[trellisName] = []);
	            const textAnchor = v.date.getTime() === maxDate.getTime() ? 'end' : v.date.getTime() === minDate.getTime() ? 'start' : 'start';
	            it[trellisName].push({ y: yPos, x: xPos, textAnchor, value: yValue, text, color: options.colors(d.key) })
	          }
	        }
	      });
	      Object.keys(it).forEach(k => {
	        const items = it[k];
	        items.sort((a,b) => a.y - b.y);
	        items.forEach((item, idx) => {
	          if (idx > 0) {
	            const last = items[idx-1].y;
	            items[idx].y += Math.max(0, (last + 15) - items[idx].y);
	          }
	        });

	        const itemsLte20 = items.filter(item => item.value <= 20);
	        items.forEach(item => {
	          const { text, x, y, color, textAnchor, value } = item;

	          text.text(options.yFormat(value))
	            .style('display', 'block')
	            // .style('fill', color)
	            .style('text-anchor', textAnchor)
	            .attr('transform', `translate(
	              ${textAnchor === 'start' ? x + 4 : x - 4},
	              ${value <= 20 && itemsLte20.length !== 1 ? y - 20 : y}
	            )`
	            );
	        });
	      });
	    }

	    function yearLabel(text, date) {
	      const offsetScale = d3.scaleLinear().domain(seriesScale.range());
	      // derive the x vale by using the first trellis/series set of values.
	      // All series are assumed to contain the same domain of X values.
	      const s = (dataByTrellis[0] && dataByTrellis[0].values[0] && dataByTrellis[0].values[0].values) || [],
	        v = s[bisect(s, date, 0, s.length - 1)];
	      if (v && v.date) {
	        const x = seriesScale(v.date);
	        text.each(function (d) {
	          d3.select(this)
	            .text(v.date.getFullYear())
	            .attr('transform', `translate(
	              ${offsetScale.range([0, trellisScale.bandwidth() - this.getComputedTextLength()])(x)},
	              ${height + 6}
	              )`
	            )
	            .style('display', null);
	        });
	      }
	    }

	    function renderLegend(g) {
	      let offset = 0;
	      options.colors.domain().forEach((d) => {
	        const legendItem = g.append('g').attr('class', 'trellisLegend');
	        const legendText = legendItem.append('text')
	          .text(d);
	        const textBBox = legendItem.node().getBBox();
	        legendText
	          .attr('x', 12)
	          .attr('y', textBBox.height);
	        legendItem.append('line')
	          .attr('x1', 0)
	          .attr('y1', 10)
	          .attr('x2', 10)
	          .attr('y2', 10)
	          .style('stroke', () => options.colors(d));
	        legendItem.attr('transform', `translate(${offset}, 0)`);
	        offset += legendItem.node().getBBox().width + 5;
	      });
	    }

	    const bisect = d3.bisector(d => d.date).left;
	    const minDate = d3.min(dataByTrellis, trellis =>
	      d3.min(trellis.values, series =>
	        d3.min(series.values, d =>
	          d.date
	        )
	      )
	    );
	    const maxDate = d3.max(dataByTrellis, trellis =>
	      d3.max(trellis.values, series =>
	        d3.max(series.values, d =>
	          d.date
	        )
	      )
	    );

	    const minY = d3.min(dataByTrellis, trellis =>
	      d3.min(trellis.values, series =>
	        d3.min(series.values, d =>
	          (d.Y_PREVALENCE_1000PP === 0 || d.Y_PREVALENCE_1000PP)
	            ? d.Y_PREVALENCE_1000PP
	            : d.yPrevalence1000Pp
	        )
	      )
	    );
	    const maxY = d3.max(dataByTrellis, trellis =>
	      d3.max(trellis.values, series =>
	        d3.max(series.values, d =>
	          (d.Y_PREVALENCE_1000PP === 0 || d.Y_PREVALENCE_1000PP)
	            ? d.Y_PREVALENCE_1000PP
	            : d.yPrevalence1000Pp
	        )
	      )
	    );

	    let seriesLabel;
	    let seriesLabelHeight = 0;
	    if (options.seriesLabel) {
	      seriesLabel = svg.append('g');
	      seriesLabel.append('text')
	        .attr('class', 'axislabel')
	        .style('text-anchor', 'middle')
	        .attr('dy', '.79em')
	        .text(options.seriesLabel);
	      if (seriesLabelHeight = seriesLabel.node()) {
	        seriesLabelHeight = seriesLabel.node().getBBox().height + 10;
	      }
	    }

	    let trellisLabel;
	    let trellisLabelHeight = 0;
	    if (options.trellisLabel) {
	      trellisLabel = svg.append('g');
	      trellisLabel.append('text')
	        .attr('class', 'axislabel')
	        .style('text-anchor', 'middle')
	        .attr('dy', '.79em')
	        .text(options.trellisLabel);
	      trellisLabelHeight = trellisLabel.node().getBBox().height + 10;
	    }

	    // simulate a single trellis heading
	    let trellisHeading;
	    let trellisHeadingHeight = 0;
	    trellisHeading = svg.append('g')
	      .attr('class', 'g-label-trellis');
	    trellisHeading.append('text')
	      .text(options.trellisSet.join(''));
	    trellisHeadingHeight = trellisHeading.node().getBBox().height + 10;
	    trellisHeading.remove();

	    let yAxisLabel;
	    let yAxisLabelWidth = 0;
	    if (options.yLabel) {
	      yAxisLabel = svg.append('g');
	      yAxisLabel.append('text')
	        .attr('class', 'axislabel')
	        .style('text-anchor', 'middle')
	        .text(options.yLabel);
	      yAxisLabelWidth = yAxisLabel.node().getBBox().height + 4;
	    }

	    // calculate an intial width and height that does not take into account the tick text dimensions
	    let width = w - options.margins.left - yAxisLabelWidth - options.margins.right;
	    let height = h - options.margins.top - trellisLabelHeight - trellisHeadingHeight- seriesLabelHeight - options.margins.bottom*2;

	    const trellisScale = d3.scaleBand()
	      .domain(options.trellisSet)
	      .range([0, width])
	      .paddingOuter(0.2)
	      .paddingInner(0.25);

	    const seriesScale = d3.scaleTime()
	      .domain([minDate, maxDate])
	      .range([0, trellisScale.bandwidth()]);

	    const yScale = d3.scaleLinear()
	      .domain([minY, maxY])
	      .range([height, 0]);

	    const yAxis = d3.axisLeft()
	      .scale(yScale)
	      .tickFormat(options.yFormat)
	      .ticks(options.yTicks);

	    // create temporary x axis
	    const xAxis = d3.axisBottom()
	      .scale(seriesScale);

	    const tempXAxis = svg
	      .append('g')
	      .attr('class', 'axis');
	    tempXAxis.call(xAxis);

	    // update width & height based on temp xaxis dimension and remove
	    const xAxisHeight = Math.round(tempXAxis.node().getBBox().height);
	    const xAxisWidth = Math.round(tempXAxis.node().getBBox().width);
	    height -= xAxisHeight;
	    // trim width if xAxisWidth bleeds over the allocated width.
	    width -= Math.max(0, (xAxisWidth - width));
	    tempXAxis.remove();

	    // create temporary y axis
	    const tempYAxis = svg.append('g').attr('class', 'axis');
	    tempYAxis.call(yAxis);

	    // update width based on temp yaxis dimension and remove
	    const yAxisWidth = Math.round(tempYAxis.node().getBBox().width);
	    width -= yAxisWidth;
	    tempYAxis.remove();

	    // reset axis ranges
	    trellisScale
	      .range([0, width])
	      .paddingOuter(0.2)
	      .paddingInner(0.25);
	    seriesScale.range([0, trellisScale.bandwidth()]);
	    yScale.range([height, 0]);


	    if (options.trellisLabel) {
	      trellisLabel.attr('transform', `translate(
	        ${(width / 2) + options.margins.left},
	        ${options.margins.top}
	      )`);
	    }

	    if (options.seriesLabel) {
	      seriesLabel.attr('transform', `translate(
	        ${(width / 2) + options.margins.left},
	        ${trellisLabelHeight + height + xAxisHeight + seriesLabelHeight + options.margins.top*2}
	      )`);
	    }

	    if (options.yLabel) {
	      yAxisLabel.attr('transform', `translate(
	        ${options.margins.left},
	        ${(height / 2) + trellisLabelHeight + trellisHeadingHeight}
	      )`);
	      yAxisLabel.select('text')
	        .attr('transform', 'rotate(-90)')
	        .attr('y', 0)
	        .attr('x', 0)
	        .attr('dy', '1em');
	    }

	    const seriesLine = d3.line()
	      .x(d => seriesScale(d.date))
	      .y(d => yScale((d.Y_PREVALENCE_1000PP === 0 || d.Y_PREVALENCE_1000PP)
	          ? d.Y_PREVALENCE_1000PP
	          : d.yPrevalence1000Pp)
	      )
	      .curve(options.interpolate);

	    // when using d3selection.select instead of d3.select, d3.mouse will have a bug with undefined event
	    const vis = d3.select(svg.node()).append('g')
	      .attr('transform', d =>
	        `translate(
	        ${yAxisLabelWidth + yAxisWidth + options.margins.left},
	        ${trellisLabelHeight}
	      )`
	      );

	    const gTrellis = vis.selectAll('.g-trellis')
	      .data(trellisScale.domain())
	      .enter()
	      .append('g')
	      .attr('class', 'g-trellis')
	      .attr('transform', d =>
	        `translate(${trellisScale(d)}, ${trellisHeadingHeight})`
	      );

	    const seriesGuideXAxis = d3.axisBottom()
	      .scale(seriesScale)
	      .tickFormat('')
	      .tickSize(-height);

	    const seriesGuideYAxis = d3.axisLeft()
	      .scale(yScale)
	      .tickFormat('')
	      .tickSize(-trellisScale.bandwidth())
	      .ticks(8);

	    gTrellis.append('g')
	      .attr('class', 'x-guide')
	      .attr('transform', `translate(0, ${height})`)
	      .call(seriesGuideXAxis);

	    gTrellis.append('g')
	      .attr('class', 'y-guide')
	      .call(seriesGuideYAxis);

	    const gSeries = gTrellis.selectAll('.g-series')
	      .data((trellis) => {
	        const seriesData = dataByTrellis.filter(e => e.key === trellis);
	        if (seriesData.length > 0)
	          return seriesData[0].values;
	        else
	          return [];
	      })
	      .enter()
	      .append('g')
	      .attr('class', 'g-series lineplot');

	    gSeries.append('path')
	      .attr('class', 'line')
	      .attr('d', d =>
	        seriesLine(d.values.sort((a, b) =>
	          d3.ascending(a.date, b.date)
	        ))
	      )
	      .style('stroke', d => options.colors(d.key));

	    gSeries.append('circle')
	      .attr('class', 'g-value')
	      .attr('transform', (d) => {
	        const v = d.values;
	        if (v
	          && v[v.length - 1]
	          && v[v.length - 1].date
	          && v[v.length - 1]
	          && (v[v.length - 1].Y_PREVALENCE_1000PP || v[v.length - 1].yPrevalence1000Pp)) {
	          const yValue = (v[v.length - 1].Y_PREVALENCE_1000PP === 0 || v[v.length - 1].Y_PREVALENCE_1000PP)
	            ? v[v.length - 1].Y_PREVALENCE_1000PP
	            : v[v.length - 1].yPrevalence1000Pp;
	          return `translate(${seriesScale(v[v.length - 1].date)}, ${yScale(yValue)})`;
	        }
	        return 'translate(0, 0)';
	      })
	      .attr('r', 2.5)
	      .style('display', 'none');

	    gSeries.append('text')
	      .attr('class', 'g-label-value g-start')
	      .call(valueLabel, minDate);

	    gSeries.append('text')
	      .attr('class', 'g-label-value g-end')
	      .call(valueLabel, maxDate);

	    gTrellis.append('text')
	      .attr('class', 'g-label-year g-start')
	      .attr('dy', '.71em')
	      .call(yearLabel, minDate);

	    gTrellis.append('text')
	      .attr('class', 'g-label-year g-end')
	      .attr('dy', '.71em')
	      .call(yearLabel, maxDate);

	    gTrellis.append('g')
	      .attr('class', 'x axis')
	      .append('line')
	      .attr('x2', trellisScale.bandwidth())
	      .attr('y1', yScale(minY))
	      .attr('y2', yScale(minY));

	    gTrellis.append('g')
	      .attr('class', 'g-label-trellis')
	      .attr('transform', d =>
	        `translate(${trellisScale.bandwidth() / 2}, 0)`
	      )
	      .append('text')
	      .attr('dy', '-1em')
	      .style('text-anchor', 'middle')
	      .text(d => d);

	    gTrellis.append('rect')
	      .attr('class', 'g-overlay')
	      .attr('x', -4)
	      .attr('width', trellisScale.bandwidth() + 8)
	      .attr('height', height + 18)
	      .on('mouseover', mouseover)
	      .on('mousemove', mousemove)
	      .on('mouseout', mouseout);

	    d3.select(gTrellis.nodes()[0]).append('g')
	      .attr('class', 'y axis')
	      .attr('transform', 'translate(-4,0)')
	      .call(yAxis);

	    const legendContainer = svg.append('g')
	      .attr('transform', `translate(${options.margins.left}, ${options.margins.top})`);
	    legendContainer.call(renderLegend);
	  }
	}

	return Trellisline;

});

/* 

Copyright 2017 Observational Health Data Sciences and Informatics

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Authors: Frank Defalco, Christopher Knoll, Pavel Grafkin, Alexander Saltykov

*/

define('atlascharts/treemap',["d3", "./chart"],
	function(d3, Chart) {
	"use strict";

	class Treemap extends Chart {
	  get formatters() {
	    return {
	      format_pct: d3.format('.2%'),
	      format_fixed: d3.format('.2f'),
	      format_comma: d3.format(','),
	    };
	  }

	  render(data, target, w, h, chartOptions) {
	    // options
	    const options = this.getOptions(chartOptions);
	    // container
	    const svg = this.createSvg(target, w, h);

	    const x = d3.scaleLinear().range([0, w]);
	    const y = d3.scaleLinear().range([0, h]);

	    d3.select(target).select('.treemap_zoomtarget').text('');
	    let currentDepth = 0;

	    const treemap = d3.treemap()
	      .round(false)
	      .size([w, h]);

	    const hierarchy = d3.hierarchy(data, function(d) {
	    	return d.children;
	    }).sum(options.getsizevalue);
	    const tree = treemap(hierarchy);

	    function zoom(d, isAnimated = true) {
	      const kx = w / (d.x1 - d.x0) || w;
	      const ky = h / (d.y1 - d.y0) || h;
	      if (d.x1 && d.y1) {
	        x.domain([d.x0, d.x0 + (d.x1 - d.x0)]);
	        y.domain([d.y0, d.y0 + (d.y1 - d.y0)]);
	      } else {
	        x.domain([0, w]);
	        y.domain([0, h]);
	      }

	      const zoomtarget = d3.select(target).select('.treemap_zoomtarget');
	      if (zoomtarget.size()) {
	        if (d.data.name === 'root') {
	          zoomtarget.text('');
	        } else {
	          const currentZoomcaption = zoomtarget.text();
	          zoomtarget.text(`${currentZoomcaption} > ${d.data.name}`);
	        }
	      }

	      let t = svg.selectAll('g.cell, .grouper');
	      if (isAnimated) {
	        t = t.transition()
	        .duration(750);
	      }
	      t.attr('transform', function(c) {
	      	return `translate(${x(c.x0)}, ${y(c.y0)})`;
	      })
	        .on('end', function () {
	          svg.selectAll('.grouper')
	            .attr('display', 'block');
	        });

	      // patched to prevent negative value assignment to width and height
	      t.select('rect')
	        .attr('width', function (c) {
	        	return Math.max(0, (kx * (c.x1 - c.x0)) - 1)
	        })
	        .attr('height', function (c) {
	        	return Math.max(0, (ky * (c.y1 - c.y0)) - 1)
	        });

	      if (event) {
	        event.stopPropagation();
	      }
	      if (options.onZoom) {
	        options.onZoom(d);
	      }
	    }

	    function applyGroupers(groupingTarget) {
	      const kx = w / (groupingTarget.x1 - groupingTarget.x0);
	      const ky = h / (groupingTarget.y1 - groupingTarget.y0);

	      const topNodes = tree.children
	        .filter(function(d) {
	        	return d.parent === groupingTarget;
	        });

	      svg.selectAll('.grouper')
	        .remove();
	      const groupers = svg.selectAll('.grouper')
	        .data(topNodes)
	        .enter()
	        .append('g')
	        .attr('class', 'grouper')
	        .attr('transform', function (d) {
	        	return `translate(${(d.x0 + 1)}, ${(d.y0 + 1)})`;
	        })
	        .attr('display', 'none');

	      groupers.append('rect')
	        .attr('width', function(d) {
	        	return Math.max(0, (kx * (d.x1 - d.x0)) - 1);
	        })
	        .attr('height', function(d) {
	        	return Math.max(0, (ky * (d.y1 - d.y0)) - 1);
	        })
	        .attr('title', function(d) {
	        	return d.name;
	        })
	        .attr('id', function(d) {
		        return d.id;
	      	});
	    }

	    const nodes = tree.leaves()
	      .filter(function(d) {
	      	return options.getsizevalue(d.data);
	      });

	    const extent = d3.extent(nodes, function(d) {
	    	return options.getcolorvalue(d.data);
	    });
	    const median = d3.median(nodes, function(d) {
	    	return options.getcolorvalue(d.data);
	    });

	    let colorRange;
	    if (options.getcolorrange) {
	      colorRange = options.getcolorrange();
	    } else {
	      colorRange = ['#E4FF7A', '#FC7F00'];
	    }

	    let colorScale = [extent[0], median, extent[1]];
	    if (options.getcolorscale) {
	      colorScale = options.getcolorscale();
	    }
	    const color = d3.scaleLinear()
	      .domain(colorScale)
	      .range(colorRange);

	    const cell = svg.selectAll('g')
	      .data(nodes)
	      .enter().append('g')
	      .attr('class', 'cell')
	      .attr('transform', function(d) {
	      	return `translate(${d.x0}, ${d.y0})`;
	      });

	    cell.append('rect')
	      .attr('width', function(d) {
	      	return Math.max(0, d.x1 - d.x0 - 1);
	      })
	      .attr('height', function(d) {
	      	return Math.max(0, d.y1 - d.y0 - 1);
	      })
	      .attr('id', function(d) {
	      	return d.id;
	      })
	      .style('fill', function(d) {
	      	return color(options.getcolorvalue(d.data));
	      })
	      .on('click', (d) => {
	        if (options.useTip) {
	          this.tip.hide();
	        }
	        if (event.altKey) {
	          zoom(hierarchy);
	          applyGroupers(hierarchy);
	        } else if (event.ctrlKey) {
	          let currentTarget = d;

	          while (currentTarget.depth !== currentDepth + 1) {
	            currentTarget = currentTarget.parent;
	          }
	          currentDepth = currentTarget.depth;
	          if (currentTarget.children && currentTarget.children.length > 1) {
	            applyGroupers(currentTarget);
	            zoom(currentTarget);
	          } else {
	            currentDepth = 0;
	            applyGroupers(hierarchy);
	            zoom(hierarchy);
	          }
	        } else {
	          options.onclick(d.data);
	        }
	      });

	    if (options.useTip) {
	      this.useTip((tip) => {
	        tip.attr('class', 'd3-tip')
	          .direction(function(d) {
	            const scaledWidth = x.domain()[1] === 1 ? w : x.domain()[1];
	            if (d.x1 >= scaledWidth - scaledWidth / 10) {
	              return 'w';
	            } else if (d.x0 <= scaledWidth / 10) {
	              return 'e';
	            }
	            return 'n';
	          })
	          .offset([3, 0])
	          .html(function (d) {
	            return `${options.gettitle(d.data)}<br/><br/>${options.getcontent(d.data)}`
	          });
	      });
	      cell
	        .on('mouseover', (d) => this.tip.show(d, event.target))
	        .on('mouseout', (d) => this.tip.hide(d, event.target))
	    } else {
	      cell
	        .attr('data-container', 'body')
	        .attr('data-toggle', 'popover')
	        .attr('data-trigger', 'hover')
	        .attr('data-placement', 'top')
	        .attr('data-html', true)
	        .attr('data-title', function(d) {
	        	return options.gettitle(d.data);
	        })
	        .attr('data-content', function(d) {
	        	return options.getcontent(d.data);
	        });
	    }

	    if (options.initialZoomedConcept) {
	      applyGroupers(options.initialZoomedConcept);
	      zoom(options.initialZoomedConcept, false);
	    } else {
	      applyGroupers(hierarchy);
	    }
	    svg
	      .selectAll('.grouper')
	      .attr('display', 'block');
	  }

	  static buildHierarchyFromJSON(data, threshold, leafNodeCreator) {
	    let total = 0;

	    const root = {
	      name: 'root',
	      children: [],
	    };

	    data.PERCENT_PERSONS.forEach(function(p) {
	      total += p;
	    });

	    data.CONCEPT_PATH.forEach(function(path, i) {
	      const parts = path.split('||');
	      let currentNode = root;
	      for (let j = 0; j < parts.length; j += 1) {
	        const children = currentNode.children;
	        const nodeName = parts[j];
	        let childNode;
	        if (j + 1 < parts.length) {
	          // Not yet at the end of the path; move down the tree.
	          let foundChild = false;
	          children.forEach(function(child) {
	            if (child.name === nodeName) {
	              childNode = child;
	              foundChild = true;
	            }
	          });
	          // If we don't already have a child node for this branch, create it.
	          if (!foundChild) {
	            childNode = {
	              name: nodeName,
	              children: [],
	            };
	            children.push(childNode);
	          }
	          currentNode = childNode;
	        } else {
	          // Reached the end of the path; create a leaf node.
	          childNode = leafNodeCreator(nodeName, i, data);

	          // we only include nodes with sufficient size in the treemap display
	          // sufficient size is configurable in the calculation of threshold
	          // which is a function of the number of pixels in the treemap display
	          if ((data.PERCENT_PERSONS[i] / total) > threshold) {
	            children.push(childNode);
	          }
	        }
	      }
	    });
	    return root;
	  }
	}
		
	return Treemap;
	
});
/*

Copyright 2017 Observational Health Data Sciences and Informatics

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Authors: Christopher Knoll, Mark Valez, Sigfried Gold, Alexander Saltykov

*/

define('atlascharts/scatterplot',['d3', './chart'],
	function(d3, Chart) {
	'use strict';

	class Scatterplot extends Chart {
	  render(data, target, w, h, chartOptions) {
			super.render(data, target, w, h, chartOptions);
	    // options
			const defaults = {
				xFormat: this.formatters.formatSI(3),
				yFormat: this.formatters.formatSI(3),
				interpolate: d3.curveLinear,
				seriesName: 'SERIES_NAME',
				xValue: 'xValue',
				yValue: 'yValue',
				cssClass: 'lineplot',
				ticks: 10,
				yTicks: 4,
				showSeriesLabel: false,
				labelIndexDate: false,
				colorBasedOnIndex: false,
				showXAxis: true,
				tooltip: (d) => {
					return `<div>Series: ${d.seriesName}</div>
					<div>X: ${d[options.xValue]}</div>
					<div>Y: ${d[options.yValue]}</div>
					`;
				},
				circleRadius: 1,
				addDiagonal: false,
				diagonalColor: '#ccc',
			};
	    const options = this.getOptions(defaults, chartOptions);
	    if (chartOptions.colors) {
		    options.colors = d3.scaleOrdinal(Object.values(chartOptions.colors))
		    	.domain(Object.keys(chartOptions.colors));
	    } else {
		    options.colors = d3.scaleOrdinal(d3.schemeCategory20)
		    	.domain(data.map(series => series.name));
	    }

	    // container
	    const svg = this.createSvg(target, w, h);

			if (data.length > 0) {
				// convert data to multi-series format if not already formatted
				if (!data[0].hasOwnProperty('values')) {
					// assumes data is just an array of values (single series)
					data = [
						{
							name: '',
							values: data
						}];
				}

	      this.useTip((tip) => {
	        tip.attr('class', 'd3-tip')
	          .offset([-10, 0])
	          .html(options.tooltip);
	      });

				let xAxisLabelHeight = 0;
				let yAxisLabelWidth = 0;
				let bbox;

				// apply labels (if specified) and offset margins accordingly
				let xAxisLabel;
				if (options.xLabel) {
					xAxisLabel = svg.append('g');

					xAxisLabel.append('text')
						.attr('class', 'axislabel')
						.style('text-anchor', 'middle')
						.text(options.xLabel);

					bbox = xAxisLabel.node().getBBox();
					xAxisLabelHeight += bbox.height;
				}

				let yAxisLabel;
				if (options.yLabel) {
					yAxisLabel = svg.append('g')
					yAxisLabel.append('text')
						.attr('class', 'axislabel')
						.attr('transform', 'rotate(-90)')
						.attr('y', 0)
						.attr('x', 0)
						.attr('dy', '1em')
						.style('text-anchor', 'middle')
						.text(options.yLabel);

					bbox = yAxisLabel.node().getBBox();
					yAxisLabelWidth = 1.5 * bbox.width; // width is calculated as 1.5 * box height due to rotation anomolies that cause the y axis label to appear shifted.
				}

				let legendWidth = 0;
				if (options.showLegend) {
					const legend = svg.append('g')
						.attr('class', 'legend');

					let maxWidth = 0;

					data.forEach(function (d, i) {
						legend.append('rect')
							.attr('x', 0)
							.attr('y', (i * 15))
							.attr('width', 10)
							.attr('height', 10)
							.style('fill', options.colors(d.name));

						const legendItem = legend.append('text')
							.attr('x', 12)
							.attr('y', (i * 15) + 9)
							.text(d.name);
						maxWidth = Math.max(legendItem.node().getBBox().width + 12, maxWidth);
					});
					legend.attr('transform', 'translate(' + (w - options.margins.right - maxWidth) + ',0)');
					legendWidth += maxWidth + 5;
				}

				// calculate an intial width and height that does not take into account the tick text dimensions
				let width = w - options.margins.left - options.margins.right - yAxisLabelWidth - legendWidth;
				let height = h - options.margins.top - options.margins.bottom - xAxisLabelHeight;

				// define the intial scale (range will be updated after we determine the final dimensions)
				const x = options.xScale || d3.scaleLinear()
					.domain([d3.min(data, function (d) {
						return d3.min(d.values, function (d) {
							return d[options.xValue];
						});
					}), d3.max(data, function (d) {
						return d3.max(d.values, function (d) {
							return d[options.xValue];
						});
					})]);

				const xAxis = d3.axisBottom()
					.scale(x)
					.ticks(options.ticks);

				// check for custom tick formatter
				if (options.tickFormat) {
					xAxis.tickFormat(options.tickFormat);
				} else // apply standard formatter
				{
					xAxis.tickFormat(options.xFormat);
				}

				// if x scale is ordinal, then apply rangeRoundBands, else apply standard range.
				if (typeof x.rangePoints === 'function') {
					x.rangePoints([0, width]);
				} else {
					x.range([0, width]);
				}

				const y = options.yScale || d3.scaleLinear()
					.domain([0, d3.max(data, function (d) {
						return d3.max(d.values, function (d) {
							return d[options.yValue];
						});
					})])
					.range([height, 0]);

				const yAxis = d3.axisLeft()
					.scale(y)
					.tickFormat(options.yFormat)
					.ticks(options.yTicks);

				// create temporary x axis
				const tempXAxis = svg.append('g').attr('class', 'axis');
				tempXAxis.call(xAxis);
				const xAxisHeight = Math.round(tempXAxis.node().getBBox().height);
				const xAxisWidth = Math.round(tempXAxis.node().getBBox().width);
				height = height - xAxisHeight;
				width = width - Math.max(0, (xAxisWidth - width)); // trim width if xAxisWidth bleeds over the allocated width.
				tempXAxis.remove();

				// create temporary y axis
				const tempYAxis = svg.append('g').attr('class', 'axis');
				tempYAxis.call(yAxis);

				// update height based on temp xaxis dimension and remove
				const yAxisWidth = Math.round(tempYAxis.node().getBBox().width);
				width = width - yAxisWidth;
				tempYAxis.remove();

				if (options.xLabel && xAxisLabel) {
					xAxisLabel
						.attr('transform', `translate(
							${yAxisLabelWidth + yAxisWidth + options.margins.left + width/2},
							${h - options.margins.bottom}
						)`)
						.selectAll('text')
						.call(this.truncate, width);
				}

				if (options.yLabel && yAxisLabel) {
					yAxisLabel
						.attr('transform', `translate(
							${options.margins.left},
							${options.margins.bottom + height/2}
						)`)
						.selectAll('text')
						.call(this.truncate, height);
				}

				// reset axis ranges
				// if x scale is ordinal, then apply rangeRoundBands, else apply standard range.
				if (typeof x.rangePoints === 'function') {
					x.rangePoints([0, width]);
				} else {
					x.range([0, width]);
				}
				y.range([height, 0]);

				const vis = svg.append('g')
					.attr('class', options.cssClass)
					.attr('transform', 'translate(' + (options.margins.left + yAxisLabelWidth + yAxisWidth) + ',' + options.margins.top + ')');

				const series = vis.selectAll('.series')
					.data(data)
					.enter()
					.append('g');

				const seriesDots = series
					.selectAll('.dot')
					.data(function (series) {
						return series.values.map(value => Object.assign({}, value, { seriesName: series.name }));
					})
					.enter()
					.append('circle')
					.attr('class', 'dot')
					.attr('r', options.circleRadius)
					.style('fill', function (d, i) {
						return options.colors(d.seriesName);
					})
					.attr('transform', function (d) {
						const xVal = x(d[options.xValue]);
						const yVal = y(d[options.yValue]);
						return 'translate(' + xVal + ',' + yVal + ')';
					});

				if (options.addDiagonal) {
					series.append("line")
						.attr("x1", 0)
						.attr("y1", height)
						.attr("x2", width)
						.attr("y2", 0)
						.attr("stroke-width", 1)
						.attr("stroke", options.diagonalColor)
						.attr("stroke-dasharray", "5,5");
				}

				if (options.showSeriesLabel) {
					series.append('text')
						.datum(function (d) {
							return {
								name: d.name,
								value: d.values[d.values.length - 1]
							};
						})
						.attr('transform', function (d) {
							return 'translate(' + x(d.value[options.xValue]) + ',' + y(d.value[options.yValue]) + ')';
						})
						.attr('x', 3)
						.attr('dy', 2)
						.style('font-size', '8px')
						.text(function (d) {
							return d.name;
						});
				}

				const indexPoints = {
					x: 0,
					y: 0
				};
				const currentObject = this;
				series.selectAll('.focus')
					.data(function (series) {
						return series.values.map(value => Object.assign({}, value, { seriesName: series.name }));
					})
					.enter()
					.append('circle')
					.attr('class', 'focus')
					.attr('r', options.circleRadius)
					.attr('transform', function (d) {
						const xVal = x(d[options.xValue]);
						const yVal = y(d[options.yValue]);
						if (d[options.xValue] === 0 && indexPoints.y === 0) {
							indexPoints.x = xVal;
							indexPoints.y = yVal;
						}
						return 'translate(' + xVal + ',' + yVal + ')';
					})
					.on('mouseover', function (d) {
						d3.select(this)
							.style('opacity', '1')
							.style('stroke', options.colors(d.seriesName))
							.style('stroke-width', options.circleRadius/2);
						currentObject.tip.show(d, event.target);
					})
					.on('mouseout', function (d) {
						d3.select(this).style('opacity', '0');
						currentObject.tip.hide(d, event.target);
					});

				if (options.showXAxis) {
					vis.append('g')
						.attr('class', 'x axis')
						.attr('transform', 'translate(0,' + height + ')')
						.call(xAxis);
				}

				vis.append('g')
					.attr('class', 'y axis')
					.call(yAxis);

				if (options.labelIndexDate) {
					vis.append('rect')
						.attr('transform', function () {
							return 'translate(' + (indexPoints.x - 0.5) + ',' + indexPoints.y + ')';
						})
						.attr('width', 1)
						.attr('height', height);
				}
			} else {
				svg.append('text')
					.attr('transform', 'translate(' + (w / 2) + ',' + (h / 2) + ')')
					.style('text-anchor', 'middle')
					.text('No Data');
			}
		};
	}

	return Scatterplot;

});

/* 

Copyright 2017 Observational Health Data Sciences and Informatics

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Authors: Christopher Knoll

*/

define('atlascharts/split-boxplot',["d3", "./boxplot"],
	function(d3, Boxplot) {
	"use strict";

	class SplitBoxplot extends Boxplot {
	  render(data, target, w, h, chartOptions) {
	    // options
			const defaults = {
				showXAxis: true,
				showMinMarkers: true,
				showMaxMarkers: true,
				boxHeight: 10, 
				valueFormatter: this.formatters.formatSI(3), 
				margins: {
		        top: 0,
		        right: 0,
		        bottom: 0,
		        left: 0,
		      }
			};
			
	    const options = this.getOptions(defaults, chartOptions);
	    // container
	    const svg = this.createSvg(target, w, h);

			const valueFormatter = options.valueFormatter;
			
	    this.useTip(this.defaultTip, options);

			// assign a category if it is absent
			data.forEach(d => d.Category = d.Category || "Default");
			
	    let width = w - options.margins.left - options.margins.right;
	    let height = h - options.margins.top - options.margins.bottom;

			// the orientaiton of this plot is horizontal, where the x axis will contain the units in the distrubiton, and the y axis will be the different categories of data
			
	    // define the intial scale (range will be updated after we determine the final dimensions)

	    const x = d3.scaleLinear()
	      .range([0, width])
	      .domain([options.xMin || d3.min(data, d => Math.min(d.target.min, d.compare.min)), options.xMax || d3.max(data, d => Math.max(d.target.max, d.compare.max))]);
			
	    const y = d3.scaleBand()
	      .range([0, height])
	      .round(1.0 / data.length)
	      .domain(data.map(d => d.Category));			

	    const xAxis = d3.axisBottom()
	      .scale(x)
	      .tickFormat(valueFormatter)
	      .ticks(5);
			
	    const yAxis = d3.axisLeft()
	      .scale(y);


			let xAxisHeight = 0, xAxisWidth = xAxisHeight;
	    if (options.showXAxis) {
				// create temporary x axis
				const tempXAxis = svg.append('g').attr('class', 'axis');
				tempXAxis.call(xAxis);

				// update width & height based on temp xaxis dimension and remove
				xAxisHeight = Math.round(tempXAxis.node().getBBox().height) + 2;
				xAxisWidth = Math.round(tempXAxis.node().getBBox().width) + 4;
				height -= xAxisHeight;
				width -= Math.max(0, (xAxisWidth - width)); // trim width if
				// xAxisWidth bleeds over the allocated width.
				tempXAxis.remove();				
			}

			let yAxisWidth = 0;
	    if (options.showYAxis) {
				// create temporary y axis
				const tempYAxis = svg.append('g').attr('class', 'axis');
				tempYAxis.call(yAxis);

				// update height based on temp xaxis dimension and remove
				yAxisWidth = Math.round(tempYAxis.node().getBBox().width);
				width -= yAxisWidth;
				tempYAxis.remove();
			}

	    const boxHeight = options.boxHeight;
	    let boxOffset = (y.bandwidth() / 2) - (boxHeight / 2);
	    let whiskerHeight = boxHeight / 2;
			let endMarkerSize = whiskerHeight / 10;

			if (options.showMinMarkers) {
				if (endMarkerSize > yAxisWidth)
					width -= 2 * endMarkerSize - yAxisWidth; // subtract from width any endMarkerSize's exceess over the yAxis Width.
				else
					width -= endMarkerSize; // subtract only the right side's end-marker width.
			}
	    // reset axis ranges
	    x.range([0, width]);
	    y.range([height, 0]);
			
	    const chart = svg.append('g')
	      .attr('transform', `translate(
	          ${options.margins.left + Math.max(yAxisWidth, endMarkerSize)},
	          ${options.margins.top}
	        )`);
			
			if (options.showLegend) {
				const legend = svg.append('g')
					.attr('class', 'legend');
				const targetLegendItem = legend.append('g');
				const compareLegendItem = legend.append('g');

				let maxWidth = 0;

				targetLegendItem.append('rect')
					.attr('x', 0)
					.attr('y', 0)
					.attr('width', 10)
					.attr('height', 10)
					.attr('class', 'target');
					
				targetLegendItem.append('text')
					.attr('x', 15)
					.attr('y', 9)
					.text('Target');

				compareLegendItem.append('rect')
					.attr('x', targetLegendItem.node().getBBox().width + 10)
					.attr('y', 0)
					.attr('width', 10)
					.attr('height', 10)
					.attr('class', 'compare');

				
				compareLegendItem.append('text')
					.attr('x', targetLegendItem.node().getBBox().width + 25)
					.attr('y', 9)
					.text('Compare');
				
				// maxWidth = Math.max(legend.node().getBBox().width + 12, maxWidth);
				legend.attr('transform', `translate(
					${(w - legend.node().getBBox().width) / 2},
					0
				)`);
			}
			
			// draw main box and whisker plots
	    const boxplots = chart.selectAll('.boxplot')
	      .data(data)
	      .enter().append('g')
	      .attr('class', 'boxplot')
	      .attr('transform', d => `translate(0, ${y(d.Category)})`);

	    const self = this;
			
			// set up scale for drawing box height
			const topScale = d3.scaleLinear()
	      .range([boxHeight/2, 0])
	      .domain([0,boxHeight]);
			
			const bottomScale = d3.scaleLinear()
	      .range([0,boxHeight/2])
	      .domain([0,boxHeight]);			
			
			const bandWidth = y.bandwidth();

	    // for each g element (containing the boxplot render surface), draw the whiskers, bars and rects
	    boxplots.each(function (boxplotData) {
	      const boxplot = d3.select(this);
				
				const boxplotContainer = boxplot.append('g')
					.attr('transform', () => `translate(0, ${boxOffset})`);
				
				const targetBox = boxplotContainer.append('g')
					.datum( boxplotData.target)
					.attr('class', 'target');
				const compareBox = boxplotContainer.append('g')
					.datum(boxplotData.compare)
					.attr('class', 'compare')
					.attr('transform', () => `translate(0, ${boxHeight/2 + 2})`);
				
				let parts = [ 
					{ "boxPlotData": boxplotData.target, "boxplot": targetBox, boxScale: topScale},
					{ "boxPlotData": boxplotData.compare, "boxplot": compareBox, boxScale: bottomScale, "tipDirection": "s", tipOffset: [10,0]}
				];
				
				parts.forEach(part => {
					let d = part.boxPlotData;
					let boxplot = part.boxplot;
					let boxScale = part.boxScale;
					
					if (d.LIF != d.q1) { // draw whisker
						boxplot.append('line')
							.attr('class', 'bar')
							.attr('x1', x(d.LIF))
							.attr('y1', boxScale(0))
							.attr('x2', x(d.LIF))
							.attr('y2', boxScale(whiskerHeight));
						boxplot.append('line')
							.attr('class', 'whisker')
							.attr('x1', x(d.LIF))
							.attr('y1', boxScale(0))
							.attr('x2', x(d.q1))
							.attr('y2', boxScale(0));
					}

					boxplot.append('rect')
						.attr('class', 'box')
						.attr('x', x(d.q1))
						.attr('y', Math.min(boxScale(0), boxScale(boxHeight)))
						.attr('width', Math.max(1, x(d.q3) - x(d.q1)))
						.attr('height', Math.abs(boxScale(0) - boxScale(boxHeight)))
						.on('mouseover', d => self.tip.show(Object.assign({}, d, { tipDirection: part.tipDirection, tipOffset: part.tipOffset }), event.target))
						.on('mouseout', d => self.tip.hide(d, event.target));

					boxplot.append('line')
						.attr('class', 'median')
						.attr('x1', x(d.median))
						.attr('y1', boxScale(0))
						.attr('x2', x(d.median))
						.attr('y2', boxScale(boxHeight));

					if (d.UIF != d.q3) { // draw whisker
						boxplot.append('line')
							.attr('class', 'bar')
							.attr('x1', x(d.UIF))
							.attr('y1', boxScale(0))
							.attr('x2', x(d.UIF))
							.attr('y2', boxScale(whiskerHeight));
						boxplot.append('line')
							.attr('class', 'whisker')
							.attr('x1', x(d.q3))
							.attr('y1', boxScale(0))
							.attr('x2', x(d.UIF))
							.attr('y2', boxScale(0));
					}
					
					if (options.showMinMarkers) {
						boxplot.append('circle')
							.attr('cx', x(d.min))
							.attr('cy', boxScale(whiskerHeight/2))
							.attr('r', endMarkerSize);
					}

					if (options.showMaxMarkers) {
						boxplot.append('circle')
							.attr('cx', x(d.max))
							.attr('cy', boxScale(whiskerHeight/2))
							.attr('r', endMarkerSize);
					}
				});
	    });

	    // draw x and y axis
			if (options.showXAxis) {
				chart.append('g')
					.attr('class', 'x axis')
					.attr('transform', `translate(0, ${height})`)
					.call(xAxis);
			}
			
			if (options.showYAxis) {
				chart.append('g')
					.attr('class', 'y axis')
					.attr('transform', `translate(0, 0)`)
					.call(yAxis)
					.selectAll('.tick text')
					.call(this.wrap, y.bandwidth() || y.range());
			}						
	  }
	}
	
	return SplitBoxplot;
	
});

/* 

Copyright 2017 Observational Health Data Sciences and Informatics

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Authors: Christopher Knoll

Adapted from sequnces sunburst (d3 v4) at: https://bl.ocks.org/kerryrodden/766f8f6d31f645c39f488a0befa1e3c8

*/

define('atlascharts/sunburst',["d3", "./chart"], function (d3, Chart) {
	"use strict";

	class Sunburst extends Chart {

		getTipDirection(d) {
			return("n");
		}
		
		getTipOffset(d, arc) {
			const bbox = event.target.getBBox();
			const arcCenter = arc.centroid(d);
			let tipOffsetX = Math.abs(bbox.x - arcCenter[0]) - (bbox.width/2)
			let tipOffsetY = Math.abs(bbox.y - arcCenter[1]);
			return([tipOffsetY-10,tipOffsetX]);
		}
		
		render(data, target, width, height, chartOptions) {
			
			super.render(data, target, width, height, chartOptions);

			const defaultOptions = {
				tooltip: (d) => {
					return `<div>No Tooltip Set</div>`
				}

			};

			// options
			const options = this.getOptions(defaultOptions, chartOptions);

			// container
			const svg = this.createSvg(target, width, height);
			svg.attr('class', 'sunburst')

	    // this must be done after createSvg()
			this.useTip((tip, options) => {
				tip.attr('class', `d3-tip ${options.tipClass || ""}`)
					.offset(d => d.tipOffset || [-10,0])
					.direction(d => d.tipDirection || "n")
					.html(d => options.tooltip(d))
			}, options);

			const vis = svg.append("svg:g")
				.attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

			const radius = Math.min(width, height) / 2;

			const partition = d3.partition()
				.size([2 * Math.PI, radius]);

			const arc = d3.arc()
				.startAngle(function (d) {
					return d.x0;
				})
				.endAngle(function (d) {
					return d.x1;
				})
				.innerRadius(function (d) {
					return d.y0
				})
				.outerRadius(function (d) {
					return d.y1
				});

			vis.append("svg:circle")
				.attr("r", radius)
				.style("opacity", 0);

			// Turn the data into a d3 hierarchy and calculate the sums.
			const root = d3.hierarchy(data)
				.sum(function (d) {
					return d.size;
				})
				.sort(function (a, b) {
					return b.value - a.value;
				});

			let nodes = partition(root).descendants().filter(d => (d.x1 - d.x0 > 0.005)).reverse(); // 0.005 radians = 0.29 degrees

			if (options.split) {
				const multiNodes = nodes.reduce((result, node) => {
					let splitNodes = options.split(node);
					if (splitNodes.length > 1) {
						node.isSplit = true;
						result = result.concat(splitNodes.map(n => Object.assign(n, {
							isPartialNode: true
						})));
					}
					return result;
				}, []);

				// append arcs, but do not apply tooltips, and only look for 'partial' nodes to select
				vis.data([data]).selectAll("partialnode")
					.data(multiNodes)
					.enter()
					.append("svg:path")
					.attr("d", arc)
					.attr("fill-rule", "evenodd")
					.attr("class", "partial")
					.style("fill", d => options.colors(d.data.name))
			}

			const self = this;

			// append arcs and tooltips
			vis.data([data]).selectAll("pathnode")
				.data(nodes)
				.enter()
				.append("svg:path")
				.attr("display", function (d) {
					return d.depth ? null : "none";
				})
				.attr("d", arc)
				.attr("fill-rule", "evenodd")
				.attr("class", d => (options.nodeClass && options.nodeClass(d)) || "node")
				.style("fill", d => d.isSplit ? "#000" : options.colors(d.data.name))
				.style("opacity", d => d.isSplit ? 0 : 1)
				.on('mouseover', d => self.tip.show(Object.assign({}, d, { tipDirection: self.getTipDirection(d), tipOffset: self.getTipOffset(d, arc)}), event.target))
				.on('mouseout', d => self.tip.hide(d, event.target))
				.on('click', (d) => options.onclick && options.onclick(d));


			//todo: .on("mouseover", mouseover);

		}
	}
	return Sunburst;
});

/* 

Copyright 2017 Observational Health Data Sciences and Informatics

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Author: Christopher Knoll




*/
define('atlascharts/util',["d3"], function(d3) {
	"use strict";
	
	var intFormat = d3.format(",.3r");
	
	function wrap(text, width) {
		text.each(function () {
			var text = d3.select(this),
				words = text.text().split(/\s+/).reverse(),
				word,
				line = [],
				lineNumber = 0,
				lineCount = 0,
				lineHeight = 1.1, // ems
				y = text.attr("y"),
				dy = parseFloat(text.attr("dy")),
				tspan = text.text(null).append("tspan").attr("x", 0).attr("y", y).attr("dy", dy + "em");
			while ((word = words.pop())) {
				line.push(word);
				tspan.text(line.join(" "));
				if (tspan.node().getComputedTextLength() > width) {
					if (line.length > 1) {
						line.pop(); // remove word from line
						words.push(word); // put the word back on the stack
						tspan.text(line.join(" "));
					}
					line = [];
					lineNumber += 1;
					tspan = text.append("tspan").attr("x", 0).attr("y", y).attr("dy", lineNumber * lineHeight + dy + "em");
				}
			}
		});
	}
	
	function formatInteger(d) {
		return intFormat(d);
	}
	
	function formatSI(p) {
		p = p || 0;
		return function (d) {
			if (d < 1) {
				return d3.round(d, p);
			}
			var prefix = d3.formatPrefix(d);
			return d3.round(prefix.scale(d), p) + prefix.symbol;
		};
	}
	
	function buildHierarchy(data, sequenceAccessor, sizeAccessor) {
		// Based on sunburst demo found here:
		// https://bl.ocks.org/kerryrodden/766f8f6d31f645c39f488a0befa1e3c8		

		//	Copyright 2013 Google Inc. All Rights Reserved.
		//
		//	Licensed under the Apache License, Version 2.0 (the "License");
		//	you may not use this file except in compliance with the License.
		//	You may obtain a copy of the License at
		//
		//	http://www.apache.org/licenses/LICENSE-2.0

		// Converts an array of data containing paths and counts, and returns a parent-child hierarchy.
		// By default, accpets a 2-column CSV and transform it into a hierarchical structure suitable
		// for a partition layout. The first column is a sequence of step names, from
		// root to leaf, separated by hyphens. The second column is a count of how 
		// often that sequence occurred.  Otherwise, pass in a sequenceAccessor and sizeAccessor to fetch the
		// values from each element.
		
		const seqAccessor = sequenceAccessor || (d => d[0]);
		const szAccessor = sizeAccessor || (d => d[1]);
		
		
		var root = {
			"name": "root",
			"children": []
		};
		for (var i = 0; i < data.length; i++) {
			var sequence = seqAccessor(data[i]);
			var size = +szAccessor(data[i]);
			if (isNaN(size)) { // e.g. if this is a header row, or the accessor did not return data
				continue;
			}
			var parts = sequence.split("-");
			var currentNode = root;
			for (var j = 0; j < parts.length; j++) {
				var children = currentNode["children"];
				var nodeName = parts[j];
				var childNode;
				if (j + 1 < parts.length) {
					// Not yet at the end of the sequence; move down the tree.
					var foundChild = false;
					for (var k = 0; k < children.length; k++) {
						if (children[k]["name"] == nodeName && children[k].children) {
							childNode = children[k];
							foundChild = true;
							break;
						}
					}
					// If we don't already have a child node for this branch, create it.
					if (!foundChild) {
						childNode = {
							"name": nodeName,
							"children": []
						};
						children.push(childNode);
					}
					currentNode = childNode;
				} else {
					// Reached the end of the sequence; create a leaf node.
					childNode = {
						"name": nodeName,
						"size": size
					};
					children.push(childNode);
				}
			}
		}
		return root;
	}
	
	return {
		wrap: wrap,
		formatInteger: formatInteger,
		formatSI : formatSI,
		buildHierarchy: buildHierarchy
	};
	
});

define('atlascharts/main',['require','./chart','./aster','./areachart','./barchart','./boxplot','./donut','./histogram','./line','./trellisline','./treemap','./scatterplot','./split-boxplot','./sunburst','./util'],function(require) {
	"use strict";
	
	var module = {
		version: "0.0.1"
	}
	
	var chart = require("./chart");
	var aster = require("./aster");
	var areachart = require("./areachart");
	var barchart = require("./barchart");
	var boxplot = require("./boxplot");
	var donut = require("./donut");
	var histogram = require("./histogram");
	var line = require("./line");
	var trellisline = require("./trellisline");
	var treemap = require("./treemap");
	var scatterplot = require("./scatterplot");
	var splitBoxplot = require("./split-boxplot");
	var sunburst = require("./sunburst");
	var util = require("./util");
	
	module.chart = chart;
	module.aster = aster;
	module.areachart = areachart;
	module.barchart = barchart;
	module.boxplot = boxplot;
	module.donut = donut;
	module.histogram = histogram;
	module.line = line;
	module.trellisline = trellisline;
	module.treemap = treemap;
	module.scatterplot = scatterplot;
	module.splitBoxplot = splitBoxplot;
	module.sunburst = sunburst;
	module.util = util;
	
	
	return module;
	
});

define('atlascharts', ['atlascharts/main'], function (main) { return main; });

